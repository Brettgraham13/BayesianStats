diff = Inf
while(diff > epsilon) {
new_o = update(A,o,games_ratios)
diff = sqrt(t(new_o - o) %*% (new_o - o))
o = new_o
}
return(o)
}
get_games_ratios = function(g) {
max(degree(g))/degree(g)
}
get_defense = function(A,o,games_ratios) {
(A %*% (1/o)) * games_ratios
}
calculateOD <- function(g, e = .5*10^-5){
#initialize offense vectors to have every team with an offensive score of 1
offense = rep(1,length(V(g)))
Adj = as.matrix(get.adjacency(g,attr='weight'))
Adj = Adj + e*(offense %*% t(offense) - diag(length(V(g))))
Adj = t(Adj)
games_ratios = get_games_ratios(g)
final_offense = run_alg(Adj, offense,games_ratios,epsilon = e)
final_defense = get_defense(Adj,final_offense,games_ratios)
# offenseVect = final_offense - mean(final_offense)
offenseVect =final_offense / sum(final_offense)
offenseVect = offenseVect - mean(offenseVect)
# offenseVect = offenseVect[order(offenseVect,decreasing = TRUE),,drop=FALSE]
defenseVect = 1/(final_defense)
defenseVect = defenseVect/sum(defenseVect)
defenseVect = defenseVect - mean(defenseVect)
# defenseVect = defenseVect[order(defenseVect,decreasing = TRUE),,drop=FALSE]
return(list(offense = offenseVect, defense = defenseVect))
}
createODDF <- function(rawData){
data <- simplify(rawData)
teamData <- data.frame()
#calculate OD
columns = c(5,7,8,10)
for(i in 2:max(data$Week)){
#Create DF based on OD for points
OD <- calculateOD(dataToGraph(data,i,4))
offense <-OD$offense
defense <- OD$defense
week = rep(i,length(offense))
teams <- names(offense[,1])
weeklyDF <- data.frame(week,teams,offense,defense)
for(j in columns){
#Expand this DF to include OD for other stats
OD <- calculateOD(dataToGraph(data,i,j))
offense <-OD$offense
defense <- OD$defense
week = rep(i,length(offense))
teams <- names(offense[,1])
w <- data.frame(week,teams,offense,defense)
weeklyDF <- weeklyDF %>%
left_join(w,by= c("week"="week","teams" = "teams"))
}
teamData <- teamData %>%
bind_rows(weeklyDF)
}
colnames(teamData) <- c("Week",'Team',"O_Points","D_Points","O_Net Rush","D_Net Rush","O_Avg Rush","D_Avg Rush","O_Net Pass",'D_Net Pass','O_Avg Pass','D_Avg Pass')
return(teamData)
}
# OD_2016 <-createODDF(game_stats_2016)
# View(OD_2016)
# g = dataToGraph(data_2016,23,6)
# Adj = as.matrix(get.adjacency(g,attr='weight'))
createOffensiveData <- function(gameData){
homeData = gameData[,c(1:10)]
awayData = gameData[,c(1:2,11:18)]
home_names = c(colnames(homeData)[1:2],unlist(strsplit(colnames(homeData[3:length(colnames(homeData))]), split='_', fixed=TRUE))[seq(2,16,by=2)])
colnames(homeData) = home_names
colnames(awayData) = home_names
modifiedData = bind_rows(awayData,homeData)
modifiedData <- modifiedData %>%
group_by(Team) %>%
arrange(Team,Week) %>%
mutate(`cumavg rush` = cummean(`Avg Rush Gain`)) %>%
mutate(`cumavg pass` = cummean(`Pass Gain/Att`)) %>%
mutate(`cumavg total rush` = cummean(`Net Yards Rushing`)) %>%
mutate(`cumavg total pass` = cummean(`Net Yards Passing`)) %>%
mutate('Next Week' = `Week`+1 )
modifiedData <- modifiedData[,-c(4:10)]
modifiedData <- modifiedData[,c(8,3:7,1:2)]
modifiedData <-modifiedData[,-c(7:8)]
colnames(modifiedData)[3:6] = paste0("Offense ", colnames(modifiedData)[3:6])
#Missing infrormation for after the team's bye week
for(i in 2:nrow(modifiedData))
if(modifiedData$`Next Week`[i-1] + 2 == modifiedData$`Next Week`[i]){
newRow = modifiedData[i-1,]
newRow$`Next Week` = modifiedData[i-1,]$`Next Week` +1
modifiedData <- bind_rows(modifiedData,newRow)
}
modifiedData <- modifiedData %>%
arrange(Team,`Next Week`)
return(modifiedData)
}
createDefensiveData <- function(gameData){
homeData = gameData[,c(1:3,12:18)]
awayData = gameData[,c(1:2,11,4:10)]
home_names = c(colnames(homeData)[1:2],unlist(strsplit(colnames(homeData[3:length(colnames(homeData))]), split='_', fixed=TRUE))[seq(2,16,by=2)])
colnames(homeData) = home_names
colnames(awayData) = home_names
modifiedData = bind_rows(awayData,homeData)
modifiedData <- modifiedData %>%
group_by(Team) %>%
arrange(Team,Week) %>%
mutate(`cumavg rush` = cummean(`Avg Rush Gain`)) %>%
mutate(`cumavg pass` = cummean(`Pass Gain/Att`)) %>%
mutate(`cumavg total rush` = cummean(`Net Yards Rushing`)) %>%
mutate(`cumavg total pass` = cummean(`Net Yards Passing`)) %>%
mutate('Next Week' = `Week`+1 )
modifiedData <- modifiedData[,-c(4:10)]
modifiedData <- modifiedData[,c(8,3:7,1:2)]
modifiedData <-modifiedData[,-c(7:8)]
colnames(modifiedData)[3:6] = paste0("Defense ", colnames(modifiedData)[3:6])
#Missing infrormation for after the team's bye week
for(i in 2:nrow(modifiedData))
if(modifiedData$`Next Week`[i-1] + 2 == modifiedData$`Next Week`[i]){
newRow = modifiedData[i-1,]
newRow$`Next Week` = modifiedData[i-1,]$`Next Week` +1
modifiedData <- bind_rows(modifiedData,newRow)
}
modifiedData <- modifiedData %>%
arrange(Team,`Next Week`)
return(modifiedData)
}
createTeamData <- function(gameData){
defenseData <- createDefensiveData(gameData)
offenseData <- createOffensiveData(gameData)
teamData <- offenseData %>%
left_join(defenseData, by= c("Next Week"="Next Week","Team" = "Team"))
return(teamData)
}
createModelDF <- function(rawDataframe, prevYearRawDataframe){
game_data <- simplify(rawDataframe)
OD_dataframe <- createODDF(rawDataframe) %>%
select(Week,Team,contains("O_"),contains("D_"))
prev_OD_dataframe <- createODDF(prevYearRawDataframe) %>%
select(Week,Team,contains("Points")) %>%
filter(Week>20) %>%
rename(`O_Points_Last_Year` = O_Points) %>%
rename(`D_Points_Last_Year` = D_Points) %>%
select(-Week)
OD_dataframe$Team = as.character(OD_dataframe$Team)
prev_OD_dataframe$Team = as.character(prev_OD_dataframe$Team)
#Account for team name changes
oldTeam = "St. Louis"
newTeam = "Los Angeles"
game_data[ game_data == oldTeam ] <- newTeam
OD_dataframe[OD_dataframe==oldTeam]<- newTeam
prev_OD_dataframe[prev_OD_dataframe==oldTeam]<-newTeam
game_id = data.frame(1:nrow(game_data))
team_names <- game_data %>%
group_by(Home_Team) %>%
summarise()
colnames(team_names)<- "Team"
team_id = data.frame(1:nrow(team_names))
team_ids <- bind_cols(team_names,team_id)
home_ids <- team_ids
colnames(home_ids)[2] = "Home_id"
away_ids <- team_ids
colnames(away_ids)[2] = "Away_id"
game_data <- game_data %>%
left_join(home_ids,by = c("Home_Team" = "Team")) %>%
left_join(away_ids,by = c("Away_Team"= "Team")) %>%
select(Date,Week,Home_Team,Home_id,Home_Points,Away_Team,Away_id,Away_Points)
H_data <- OD_dataframe
A_data <- OD_dataframe
H_prev <- prev_OD_dataframe
A_prev <- prev_OD_dataframe
colnames(H_data)[1:ncol(H_data)] <- paste0("Home_",colnames(H_data)[1:ncol(H_data)])
colnames(A_data)[1:ncol(A_data)] <- paste0("Away_",colnames(A_data)[1:ncol(A_data)])
colnames(H_prev)[1:ncol(H_prev)] <- paste0("Home_",colnames(H_prev)[1:ncol(H_prev)])
colnames(A_prev)[1:ncol(A_prev)] <- paste0("Away_",colnames(A_prev)[1:ncol(A_prev)])
game_data <- game_data %>%
bind_cols(game_id) %>%
left_join(H_data,by = c("Week" = "Home_Week", "Home_Team"="Home_Team")) %>%
left_join(H_prev,by = c("Home_Team"="Home_Team")) %>%
left_join(A_data,by = c("Week" = "Away_Week", "Away_Team"="Away_Team")) %>%
left_join(A_prev,by = c("Away_Team"="Away_Team")) %>%
select(Date,Week,contains("Home_"),contains("Away_")) %>%
filter(Week >2) %>%
arrange(Week,Home_Team)
binnedWeeks <- rep(0, nrow(game_data))
weeks <- game_data$Week
# for(i in 1:length(weeks)){
#   if(weeks[i]>=1 & weeks[i]<=5){
#     binnedWeeks[i]=1
#   } else if(weeks[i]>=6 & weeks[i]<=10){
#     binnedWeeks[i] = 2
#   } else if(weeks[i]>=11 & weeks[i] <=14){
#     binnedWeeks[i] = 3
#   } else{
#     binnedWeeks[i] = 4
#   }
# }
for(i in 1:length(weeks)){
if(weeks[i]>=1 & weeks[i]<=5){
binnedWeeks[i] = 1
} else if(weeks[i]>=5 & weeks[i] <=10){
binnedWeeks[i] = 2
} else{
binnedWeeks[i] = 3
}
}
binnedWeeks <-data.frame(binnedWeeks)
colnames(binnedWeeks)<- "binnedWeeks"
game_data <- bind_cols(game_data,binnedWeeks)
return(game_data)
}
# View(createModelDF(game_stats_2016,game_stats_2015))
# View(createModelDF(game_stats_2015,game_stats_2014))
# data_2014 <-simplify(game_stats_2016)
# data_2015 <-simplify(game_stats_2016)
# data_2016 <-simplify(game_stats_2016)
# data_2017 <-simplify(game_stats_2016)
modelDF2011 <- createModelDF(game_stats_2011,game_stats_2010)
game_stats_2010 <- createDataframe(2010)
# game_stats_2010 <- createDataframe(2010)
game_stats_2010<- game_stats_2010[-c(208,240),]
game_stats_2011 <- createDataframe(2011)
# data_2014 <-simplify(game_stats_2016)
# data_2015 <-simplify(game_stats_2016)
# data_2016 <-simplify(game_stats_2016)
# data_2017 <-simplify(game_stats_2016)
modelDF2011 <- createModelDF(game_stats_2011,game_stats_2010)
modelDF2012 <- createModelDF(game_stats_2012,game_stats_2011)
modelDF2013 <- createModelDF(game_stats_2013,game_stats_2012)
modelDF2014 <- createModelDF(game_stats_2014,game_stats_2013)
modelDF2015 <- createModelDF(game_stats_2015,game_stats_2014)
modelDF2016 <- createModelDF(game_stats_2016,game_stats_2015)
# modelDF2017 <- createModelDF(game_stats_2017,game_stats_2016)
library(tidyr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(readr)
library(igraph)
library(rjags)
#Data filtered to later weeks to avoid noise
modelData <-modelDF2015 %>%
bind_rows(modelDF2014) %>%
bind_rows(modelDF2013) %>%
bind_rows(modelDF2012) %>%
bind_rows(modelDF2011)
modelDF2016 <- filter(modelDF2016,Week>3)
final <- "model{
#Data
for(i in 1:length(H_pts)) {
H_pts[i] ~ dpois(H_lam[i])
A_pts[i] ~ dpois(A_lam[i])
log(H_lam[i]) <- b0 + h0 + b1[w[i]]*(h_O[i] - a_D[i]) + b2[w[i]]*(hprior_O[i] - aprior_D[i])
log(A_lam[i]) <- b0 + b1[w[i]]*(a_O[i] -h_D[i]) + b2[w[i]]*(aprior_O[i] - hprior_D[i])
}
#Modify the weighting on the relationship between current stats and the priors over time.
for(t in 1:3){
b1[t] ~ dnorm(1,1/10)
b2[t] ~ dnorm(1,1/10)
}
#Priors
b0 ~ dnorm(0,1/10)
h0 ~ dnorm(3,1/10)
}"
final_jags <- jags.model(textConnection(final),
data= list(H_pts = modelData$Home_Points, A_pts = modelData$Away_Points,h_D= modelData$Home_D_Points , h_O= modelData$Home_O_Points , a_D= modelData$Away_D_Points , a_O= modelData$Away_O_Points,hprior_O = modelData$Home_O_Points_Last_Year,hprior_D = modelData$Home_D_Points_Last_Year,aprior_O = modelData$Away_O_Points_Last_Year,aprior_D = modelData$Away_D_Points_Last_Year, w = modelData$binnedWeeks),
inits=list(.RNG.name="base::Wichmann-Hill", .RNG.seed=1989))
final_sim <- coda.samples(final_jags, variable.names=c("h0","b0","b1","b2"), n.iter=10000)
final_sample <- data.frame(step=1:10000, score_diff_sim[[1]])
head(final_sample)
summary(final_sim)
plot(final_sim)
set.seed(13)
single_prediction <- function(modelDFRow, predictionsDF){
home_pred = rpois(10000,exp(predictionsDF$h0 + predictionsDF$b0 + predictionsDF[,modelDFRow$binnedWeek + 2]*(modelDFRow$`Home_O_Points` - modelDFRow$`Away_D_Points`) + predictionsDF[,modelDFRow$binnedWeek + 5]*(modelDFRow$`Home_O_Points_Last_Year` - modelDFRow$`Away_D_Points_Last_Year`)))
away_pred = rpois(10000,exp(predictionsDF$b0 + predictionsDF[,modelDFRow$binnedWeek + 2]*(modelDFRow$`Away_O_Points` - modelDFRow$`Home_D_Points`) + predictionsDF[,modelDFRow$binnedWeek + 5]*(modelDFRow$`Away_O_Points_Last_Year` - modelDFRow$`Home_D_Points_Last_Year`)))
return(list(score_diff = home_pred - away_pred, total_pts = home_pred + away_pred))
}
all_predictions <- function(data, sampleDF){
score_diff_predictions = rep(0,nrow(data))
total_points_predictions = rep(0,nrow(data))
for(i in 1:nrow(data)){
prediction = single_prediction(data[i,],sampleDF)
score_diff_predictions[i] = round(mean(prediction$score_diff))
total_points_predictions[i] = round(mean(prediction$total_pts))
}
predictionsDF = data.frame(score_diff_predictions,total_points_predictions)
newDF = bind_cols(data,predictionsDF)
return(newDF)
}
predict2016 = all_predictions(modelDF2016, final_sample)
predict2016 <- predict2016 %>%
mutate(score_diff = Home_Points - Away_Points) %>%
mutate(score_accuracy = score_diff_predictions - score_diff) %>%
mutate(score_error = abs(score_accuracy)) %>%
mutate(total_pts = Home_Points + Away_Points) %>%
mutate(total_pts_accuracy = total_points_predictions - total_pts) %>%
mutate(total_error = abs(total_pts_accuracy)) %>%
select(Date,Week,Home_Team,Home_Points,Away_Team,Away_Points,contains('score'),contains('total'))
onlyTeam <- function(dataframe,Team){
onlyTeamData <- dataframe %>%
subset(Home_Team == Team | Away_Team == Team)
return(onlyTeamData)
}
teamPredictions <- function(dataframe,team){
teamData <- onlyTeam(dataframe, team)
teamHome <- teamData %>%
subset(Home_Team == team) %>%
select(Week,Home_Team,7:10) %>%
rename(Team = Home_Team) %>%
mutate(team_score_diff_predictions = score_diff_predictions) %>%
mutate(team_score_diff = score_diff) %>%
mutate(team_score_accuracy = score_accuracy) %>%
select(Week,Team,contains("team"),score_error)
teamAway <- teamData %>%
subset(Away_Team == team) %>%
select(Week,Away_Team,7:10) %>%
rename(Team = Away_Team) %>%
mutate(team_score_diff_predictions = -1*score_diff_predictions) %>%
mutate(team_score_diff = -1*score_diff) %>%
mutate(team_score_accuracy = -1*score_accuracy) %>%
select(Week,Team,contains("team"),score_error)
finalTeamData <- bind_rows(teamAway,teamHome) %>%
select(Week,Team,contains("score_diff"),-contains('accuracy')) %>%
arrange(Week) %>%
gather(Variable, Points,-Week,-Team)
return(finalTeamData)
}
# mean(predict2016$`score_accuracy`)
ggplot(predict2016, aes(x=`score_accuracy`)) + geom_histogram(binwidth = 3, aes(y=..density..))
ggplot(predict2016, aes(x=`total_pts_accuracy`)) + geom_histogram(binwidth = 3, aes(y=..density..))
ggplot(predict2016, aes(x=`score_error`)) + geom_histogram(binwidth = 3, aes(y=..density..))
ggplot(predict2016, aes(x=`total_error`)) + geom_histogram(binwidth = 3, aes(y=..density..))
mean(predict2016$score_error)
mean(predict2016$total_error)
denver = teamPredictions(predict2016,"Denver")
newEngland = teamPredictions(predict2016,"New England")
losAngeles = teamPredictions(predict2016,"Los Angeles")
carolina = teamPredictions(predict2016,"Carolina")
chicago = teamPredictions(predict2016,"Chicago")
ggplot(denver, aes(x= Week,y = Points,color = Variable)) +
geom_line() + geom_point()
ggplot(newEngland, aes(x= Week,y = Points,color = Variable)) +
geom_line() + geom_point()
ggplot(losAngeles, aes(x= Week,y = Points,color = Variable)) +
geom_line() + geom_point()
ggplot(carolina, aes(x= Week,y = Points,color = Variable)) +
geom_line() + geom_point()
ggplot(chicago, aes(x= Week,y = Points,color = Variable)) +
geom_line() + geom_point()
score_diff <- "model{
#Data
for(i in 1:length(H_pts)) {
H_pts[i] ~ dpois(H_lam[i])
A_pts[i] ~ dpois(A_lam[i])
log(H_lam[i]) <- h0 + b0 + b1*h_O[i] + b2*a_D[i] + theta[h[i]]
log(A_lam[i]) <- b0 + b1*a_O[i] + b2*h_D[i] + theta[a[i]]
}
# Hierarchical Component
for(j in 1:32){
theta[j] ~ dnorm(0,tau)
}
#Priors
tau ~ dgamma(1,1/10)
h0 ~ dnorm(3,1/10)
b0 ~ dnorm(0,1/10)
b1 ~ dnorm(1,1/10)
b2 ~ dnorm(1,1/10)
}"
score_diff_jags <- jags.model(textConnection(score_diff),
data= list(H_pts = modelData$Home_Points, A_pts = modelData$Away_Points, h= modelData$Home_id, a= modelData$Away_id,h_D= modelData$Home_D_Points , h_O= modelData$Home_O_Points , a_D= modelData$Away_D_Points , a_O= modelData$Away_O_Points),
inits=list(.RNG.name="base::Wichmann-Hill", .RNG.seed=1989))
score_diff_sim <- coda.samples(score_diff_jags, variable.names=c("theta","tau","h0","b0","b1","b2"), n.iter=10000)
score_diff_sample <- data.frame(step=1:10000, score_diff_sim[[1]])
head(score_diff_sample)
summary(score_diff_sim)
plot(score_diff_sim)
set.seed(13)
predictScoreDiff <- function(modelDFRow){
predictions =
rpois(10000,exp(score_diff_sample$h0 + score_diff_sample$b0 + score_diff_sample$b1*modelDFRow$Home_O_Points + score_diff_sample$b2*modelDFRow$Away_D_Points + rnorm(score_diff_sample[,modelDFRow$Home_id + 6], sqrt(1/score_diff_sample$tau)))) -
rpois(10000, exp(score_diff_sample$b0 + score_diff_sample$b1*modelDFRow$Away_O_Points + score_diff_sample$b2*modelDFRow$Home_D_Points + rnorm(score_diff_sample[,modelDFRow$Away_id + 6],sqrt(1/score_diff_sample$tau))))
}
comparePrediction <- function(modelDF){
accuracyVect = rep(0,nrow(modelDF))
for(i in 1:nrow(modelDF)){
scoreDiff = modelDF$Home_Points[i] - modelDF$Away_Points[i]
predictionsDF = data.frame(predictScoreDiff(modelDF[i,]))
meanPredictions = round(mean(predictionsDF[,1]))
accuracyVect[i] = round(scoreDiff - meanPredictions)
}
accuracyDF = data.frame(accuracyVect,abs(accuracyVect))
colnames(accuracyDF)<- c("Prediction Accuracy","Error")
return(accuracyDF)
}
predictions2016 = comparePrediction(modelDF2016)
# View(predictions2016)
mean(predictions2016$`Prediction Accuracy`)
mean(predictions2016$Error)
ggplot(predictions2016, aes(x=`Prediction Accuracy`)) + geom_histogram(binwidth = 3, aes(y=..density..))
score_diff <- "model{
#Data
for(i in 1:length(H_pts)) {
H_pts[i] ~ dpois(h0 + H_lam[i])
A_pts[i] ~ dpois(A_lam[i])
log(H_lam[i]) <- b0 + b1*h_O[i] + b2*a_D[i] + b3*h_OR[i] + b4*h_OP[i] + b5*a_DR[i] + b6*a_DP[i] + theta[h[i]]
log(A_lam[i]) <- b0 + b1*a_O[i] + b2*h_D[i] + b3*a_OR[i] + b4*a_OP[i] + b5*h_DR[i] + b6*h_DP[i] +theta[a[i]]
}
# Hierarchical Component
for(j in 1:32){
theta[j] ~ dnorm(0,tau)
}
#Priors
tau ~ dgamma(1,1/10)
h0 ~ dnorm(3,1/10)
b0 ~ dnorm(0,1/10)
b1 ~ dnorm(5,1/10)
b2 ~ dnorm(-5,1/10)
b3 ~ dnorm(5,1/10)
b4 ~ dnorm(5,1/10)
b5 ~ dnorm(-5,1/10)
b6 ~ dnorm(-5,1/10)
}"
score_diff_jags <- jags.model(textConnection(score_diff),
data= list(H_pts = modelData$Home_Points, A_pts = modelData$Away_Points, h= modelData$Home_id, a= modelData$Away_id,h_D= modelData$Home_D_Points , h_O= modelData$Home_O_Points , a_D= modelData$Away_D_Points , a_O= modelData$Away_O_Points, h_OR = modelData$`Home_O_Net Rush`, h_OP = modelData$`Home_D_Net Pass`, h_DR = modelData$`Home_D_Net Rush`, h_DP = modelData$`Home_D_Net Pass`, a_OR = modelData$`Away_O_Net Rush`, a_OP = modelData$`Away_O_Net Pass`, a_DR = modelData$`Away_D_Net Rush`, a_DP = modelData$`Away_D_Net Pass`),
inits=list(.RNG.name="base::Wichmann-Hill", .RNG.seed=1989))
score_diff_sim <- coda.samples(score_diff_jags, variable.names=c("theta","tau","h0","b0", "b1","b2", "b3", "b4", "b5", "b6"), n.iter=10000)
score_diff_sample <- data.frame(step=1:10000, score_diff_sim[[1]])
head(score_diff_sample)
summary(score_diff_sim)
plot(score_diff_sim)
set.seed(13)
predictScoreDiff <- function(modelDFRow){
predictions =
rpois(10000,exp(score_diff_sample$h0 + score_diff_sample$b0 + score_diff_sample$b1*modelDFRow$Home_O_Points + score_diff_sample$b2*modelDFRow$Away_D_Points + rnorm(score_diff_sample[,modelDFRow$Home_id + 6], sqrt(1/score_diff_sample$tau)))) -
rpois(10000, exp(score_diff_sample$b0 + score_diff_sample$b1*modelDFRow$Away_O_Points + score_diff_sample$b2*modelDFRow$Home_D_Points + rnorm(score_diff_sample[,modelDFRow$Away_id + 6],sqrt(1/score_diff_sample$tau))))
}
comparePrediction <- function(modelDF){
accuracyVect = rep(0,nrow(modelDF))
for(i in 1:nrow(modelDF)){
scoreDiff = modelDF$Home_Points[i] - modelDF$Away_Points[i]
predictionsDF = data.frame(predictScoreDiff(modelDF[i,]))
meanPredictions = mean(predictionsDF[,1])
accuracyVect[i] = round(scoreDiff - meanPredictions)
}
accuracyDF = data.frame(accuracyVect)
colnames(accuracyDF)[1]<- "Prediction Accuracy"
return(accuracyDF)
}
predictions2016 = comparePrediction(modelDF2016)
# View(predictions2016)
mean(predictions2016$`Prediction Accuracy`)
ggplot(predictions2016, aes(x=`Prediction Accuracy`)) + geom_histogram(binwidth = 3, aes(y=..density..))
score_diff <- "model{
#Data
for(i in 1:length(H_pts)) {
H_pts[i] ~ dpois(H_lam[i])
A_pts[i] ~ dpois(A_lam[i])
log(H_lam[i]) <- h0 + b0 + b1*h_O[i] + b2*a_D[i] + theta[h[i]]
log(A_lam[i]) <- b0 + b1*a_O[i] + b2*h_D[i] + theta[a[i]]
}
# Hierarchical Component
for(j in 1:32){
theta[j] ~ dnorm(0,tau)
}
#Priors
tau ~ dgamma(1,1/10)
h0 ~ dnorm(3,1/10)
b0 ~ dnorm(0,1/10)
b1 ~ dnorm(1,1/10)
b2 ~ dnorm(1,1/10)
}"
score_diff_jags <- jags.model(textConnection(score_diff),
data= list(H_pts = modelData$Home_Points, A_pts = modelData$Away_Points, h= modelData$Home_id, a= modelData$Away_id,h_D= modelData$Home_D_Points , h_O= modelData$Home_O_Points , a_D= modelData$Away_D_Points , a_O= modelData$Away_O_Points),
inits=list(.RNG.name="base::Wichmann-Hill", .RNG.seed=1989))
score_diff_sim <- coda.samples(score_diff_jags, variable.names=c("theta","tau","h0","b0","b1","b2"), n.iter=10000)
score_diff_sample <- data.frame(step=1:10000, score_diff_sim[[1]])
head(score_diff_sample)
View(modelData)
help(add title)
help(title)
game_stats_2010 <- createDataframe(2010)
set.seed(13)
predictions2016 = all_predictions(modelDF2016,final_sample)
# View(predictions2016)
predictions2016 <- predict2016 %>%
mutate(score_diff = Home_Points - Away_Points) %>%
mutate(score_accuracy = score_diff_predictions - score_diff) %>%
mutate(score_error = abs(score_accuracy)) %>%
mutate(total_pts = Home_Points + Away_Points) %>%
mutate(total_pts_accuracy = total_points_predictions - total_pts) %>%
mutate(total_error = abs(total_pts_accuracy)) %>%
select(Date,Week,Home_Team,Home_Points,Away_Team,Away_Points,contains('score'),contains('total'))
mean(predictions2016$`score_accuracy`)
mean(predictions2016$score_error)
ggplot(predictions2016, aes(x=`score_accuracy`)) + geom_histogram(binwidth = 3, aes(y=..density..))
ggplot(predictions2016, aes(x=`score_error`)) + geom_histogram(binwidth = 3, aes(y=..density..))
set.seed(13)
predictions2016 = all_predictions(modelDF2016,final_sample)
# View(predictions2016)
predictions2016 <- predict2016 %>%
mutate(score_diff = Home_Points - Away_Points) %>%
mutate(score_accuracy = score_diff_predictions - score_diff) %>%
mutate(score_error = abs(score_accuracy)) %>%
mutate(total_pts = Home_Points + Away_Points) %>%
mutate(total_pts_accuracy = total_points_predictions - total_pts) %>%
mutate(total_error = abs(total_pts_accuracy)) %>%
select(Date,Week,Home_Team,Home_Points,Away_Team,Away_Points,contains('score'),contains('total'))
mean(predictions2016$`score_accuracy`)
mean(predictions2016$score_error)
ggplot(predictions2016, aes(x=`score_accuracy`)) + geom_histogram(binwidth = 3, aes(y=..density..))
ggplot(predictions2016, aes(x=`score_error`)) + geom_histogram(binwidth = 3, aes(y=..density..))
