{
    "collab_server" : "",
    "contents" : "---\ntitle: \"New Models\"\nauthor: \"Brett Graham\"\ndate: \"12/6/2017\"\noutput: html_document\n---\n\n```{r}\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(lubridate)\nlibrary(readr)\nlibrary(igraph)\nlibrary(rjags)\nlibrary(tibble)\n\n```\n\n\n```{r} \n#Data filtered to later weeks to avoid noise\n\nmodelData <-modelDF2016 %>%\n  bind_rows(modelDF2015) %>% \n  bind_rows(modelDF2014) %>%\n  bind_rows(modelDF2013) %>%\n  bind_rows(modelDF2012) %>%\n  bind_rows(modelDF2011)\n\n\ntestData <-modelDF2017\n```\n\nGoal:\nCreate a model that predicts the score differential in a game\n\n```{r}\nfinal <- \"model{\n  #Data\n  for(i in 1:length(H_pts)) {\n    H_pts[i] ~ dpois(H_lam[i] + h0[home[i]])\n    A_pts[i] ~ dpois(A_lam[i])\n  \n    log(H_lam[i]) <- b0 + b1[w[i]]*(h_O[i] - a_D[i]) + b2[w[i]]*(hprior_O[i] - aprior_D[i]) \n    log(A_lam[i]) <- b0 + b1[w[i]]*(a_O[i] -h_D[i]) + b2[w[i]]*(aprior_O[i] - hprior_D[i]) \n  }\n\n  #Modify the weighting on the relationship between current stats and the priors over time.\n  for(t in 1:3){\n    b1[t] ~ dnorm(1,1/10)\n    b2[t] ~ dnorm(1,1/10)\n\n  }\n\n  for(j in 1:32){\n    h0[j] ~ dnorm(hmu,1/htau)\n  }\n\n\n  #Priors\n  b0 ~ dnorm(0,1/10)\n  hmu ~ dnorm(3,1)\n  htau ~ dgamma(1,1/10)\n\n}\"\n\nfinal_jags <- jags.model(textConnection(final),\n                              \ndata= list(H_pts = modelData$Home_Points, A_pts = modelData$Away_Points,h_D= modelData$Home_D_Points , h_O= modelData$Home_O_Points , a_D= modelData$Away_D_Points , a_O= modelData$Away_O_Points,hprior_O = modelData$Home_O_Points_Last_Year,hprior_D = modelData$Home_D_Points_Last_Year,aprior_O = modelData$Away_O_Points_Last_Year,aprior_D = modelData$Away_D_Points_Last_Year, w = modelData$binnedWeeks, home = modelData$Home_id),\n\ninits=list(.RNG.name=\"base::Wichmann-Hill\", .RNG.seed=1989))\n\nfinal_sim <- coda.samples(final_jags, variable.names=c(\"h0\",\"b0\",\"b1\",\"b2\",\"hmu\",\"htau\"), n.iter=10000)\n\nfinal_sample <- data.frame(step=1:10000, final_sim[[1]])\nhead(final_sample)\n```\n```{r}\nsummary(final_sim)\nplot(final_sim)\n```\n```{r}\nhome_bayes_est <- final_sample %>% \n    select(contains(\"h0\")) %>% \n    colMeans()\nhead(home_bayes_est)\n```\nb)\\\n```{r}\nhome_pred <- data.frame(Team=teamIDs2017$Team, Home_Advantage=home_bayes_est)\n\n# BA_pred <- BA_pred %>% \n#     gather(key=method, value=estimate, -player)\n```\n```{r}\ng1 <- ggplot(home_pred, aes(x=Home_Advantage, y=reorder(Team,Home_Advantage))) + \n    geom_point() +\n    labs(x=\"Home Advantage\", y=\"Team\")\ng1\n```\n```{r}\nbeta_estimates <- final_sample %>% \n    select(contains(\"b1\"),contains(\"b2\")) %>% \n    colMeans()\n\nbeta_estimates<-data.frame(beta_estimates) %>%\n  bind_cols(data.frame(c(\"b1\",\"b1\",\"b1\",\"b2\",\"b2\",\"b2\")))%>% \n  bind_cols(data.frame(c(1,2,3,1,2,3)))\n\ncolnames(beta_estimates)<-c(\"Value\", \"Variable\",\"Binned_Week\")\n# View(beta_estimates)\n\nggplot(data = beta_estimates, aes(x = Binned_Week,y = Value, color = Variable)) +\n  geom_point() + \n  geom_line()\n\n```\nb)\\\n```{r}\nhome_pred <- data.frame(Team=teamIDs2017$Team, Home_Advantage=home_bayes_est)\n\n# BA_pred <- BA_pred %>% \n#     gather(key=method, value=estimate, -player)\n```\n```{r}\ng1 <- ggplot(home_pred, aes(x=Home_Advantage, y=reorder(Team,Home_Advantage))) + \n    geom_point() +\n    labs(x=\"Home Advantage\", y=\"Team\")\ng1\n```\n```{r}\nset.seed(13)\nsingle_prediction <- function(modelDFRow, predictionsDF){\n  home_impact = predictionsDF[,modelDFRow$Home_id + 8] \n  if(modelDFRow$Week ==21){\n    home_impact = 0\n  }\n  \n  home_pred = rpois(10000, home_impact+ exp(predictionsDF$b0 + predictionsDF[,modelDFRow$binnedWeek + 2]*(modelDFRow$`Home_O_Points` - modelDFRow$`Away_D_Points`) + predictionsDF[,modelDFRow$binnedWeek + 5]*(modelDFRow$`Home_O_Points_Last_Year` - modelDFRow$`Away_D_Points_Last_Year`)))\n  \n  away_pred = rpois(10000,exp(predictionsDF$b0 + predictionsDF[,modelDFRow$binnedWeek + 2]*(modelDFRow$`Away_O_Points` - modelDFRow$`Home_D_Points`) + predictionsDF[,modelDFRow$binnedWeek + 5]*(modelDFRow$`Away_O_Points_Last_Year` - modelDFRow$`Home_D_Points_Last_Year`)))\n  \n  return(list(score_diff = home_pred - away_pred, total_pts = home_pred + away_pred))           \n}\n\nall_predictions <- function(data, sampleDF){\n  score_diff_predictions = rep(0,nrow(data))\n  total_points_predictions = rep(0,nrow(data))\n  for(i in 1:nrow(data)){\n    prediction = single_prediction(data[i,],sampleDF)\n    score_diff_predictions[i] = round(mean(prediction$score_diff))\n    total_points_predictions[i] = round(mean(prediction$total_pts))\n  }\n  predictionsDF = data.frame(score_diff_predictions,total_points_predictions)\n\n  newDF = bind_cols(data,predictionsDF)\n  return(newDF)\n}\n```\n\n\n\n\n```{r}\nset.seed(13)\npredict2017 = all_predictions(testData, final_sample)\n\npredict2017 <- predict2017 %>%\n  mutate(score_diff = Home_Points - Away_Points) %>%\n  mutate(score_accuracy = score_diff_predictions - score_diff) %>%\n  mutate(score_error = abs(score_accuracy)) %>%\n  mutate(total_pts = Home_Points + Away_Points) %>%\n  mutate(total_pts_accuracy = total_points_predictions - total_pts) %>%\n  mutate(total_error = abs(total_pts_accuracy)) %>%\n  select(Date,Week,Home_Team,Home_Points,Away_Team,Away_Points,contains('score'),contains('total')) %>%\n  mutate(winner = sign(score_diff)) %>%\n  mutate(predicted_winner = sign(score_diff_predictions)) %>%\n  mutate(prediction_score=abs(winner+predicted_winner)/2)\n\n\n\nonlyTeam <- function(dataframe,Team){\n  onlyTeamData <- dataframe %>%\n    subset(Home_Team == Team | Away_Team == Team)\n  return(onlyTeamData)\n}\n\nteamPredictions <- function(dataframe,team){\n  \n  teamData <- onlyTeam(dataframe, team)\n  \n  teamHome <- teamData %>%\n    subset(Home_Team == team) %>%\n    select(Week,Home_Team,7:10) %>%\n    rename(Team = Home_Team) %>%\n    mutate(team_score_diff_predictions = score_diff_predictions) %>%\n    mutate(team_score_diff = score_diff) %>%\n    mutate(team_score_accuracy = score_accuracy) %>%\n    select(Week,Team,contains(\"team\"),score_error)\n\n  teamAway <- teamData %>%\n    subset(Away_Team == team) %>%\n    select(Week,Away_Team,7:10) %>%\n    rename(Team = Away_Team) %>%\n    mutate(team_score_diff_predictions = -1*score_diff_predictions) %>%\n    mutate(team_score_diff = -1*score_diff) %>%\n    mutate(team_score_accuracy = -1*score_accuracy) %>%\n    select(Week,Team,contains(\"team\"),score_error)\n  \n  finalTeamData <- bind_rows(teamAway,teamHome) %>%\n    select(Week,Team,contains(\"score_diff\"),-contains('accuracy')) %>%\n    arrange(Week) %>%\n    gather(Result, `Point Differential`,-Week,-Team)\n  \n  return(finalTeamData)\n}\n\n```\n\n# View(predict2017)\n\n```{r}\n\n# mean(predict2017$`score_accuracy`)\nggplot(predict2017, aes(x=`score_accuracy`)) + geom_histogram(binwidth = 3, aes(y=..density..))\nggplot(predict2017, aes(x=`total_pts_accuracy`)) + geom_histogram(binwidth = 3, aes(y=..density..))\n\nggplot(predict2017, aes(x=`score_error`)) + geom_histogram(binwidth = 3, aes(y=..density..))\nggplot(predict2017, aes(x=`total_error`)) + geom_histogram(binwidth = 3, aes(y=..density..))\n```\n```{r}\nmean(predict2017$score_error)\nmean(predict2017$total_error)\n\nmean(predict2017$score_accuracy)\nmean(predict2017$total_pts_accuracy)\n\n```\n\n```{r}\ndenver = teamPredictions(predict2017,\"Denver\")\nnewEngland = teamPredictions(predict2017,\"New England\")\nlaRams = teamPredictions(predict2017,\"LA Rams\")\ncarolina = teamPredictions(predict2017,\"Carolina\")\nchicago = teamPredictions(predict2017,\"Chicago\")\ngreenBay = teamPredictions(predict2017,\"Green Bay\")\nnewOrleans = teamPredictions(predict2017,\"New Orleans\")\ntennessee =  teamPredictions(predict2017,\"Tennessee\")\noakland = teamPredictions(predict2017,\"Oakland\")\nminnesota = teamPredictions(predict2017,\"Minnesota\")\ncleveland = teamPredictions(predict2017,\"Cleveland\")\natlanta = teamPredictions(predict2017,\"Atlanta\")\ndallas = teamPredictions(predict2017,\"Dallas\")\njacksonville = teamPredictions(predict2017,\"Jacksonville\")\nPhiladelphia = teamPredictions(predict2017,\"Philadelphia\")\n\n\n\n\n\n\n\nggplot(Philadelphia, aes(x= Week,y = `Point Differential`,color = Result)) +\n    geom_line() + geom_point() + ggtitle(\"Philadelphia\") + \n    scale_color_discrete(labels=c(\"Score\",\"Prediction\"))\n\nggplot(jacksonville, aes(x= Week,y = `Point Differential`,color = Result)) +\n    geom_line() + geom_point() + ggtitle(\"Jacksonville\")+ \n    scale_color_discrete(labels=c(\"Score\",\"Prediction\"))\n\nggplot(denver, aes(x= Week,y = `Point Differential`,color = Result)) +\n    geom_line() + geom_point() + ggtitle(\"Denver\")+ \n    scale_color_discrete(labels=c(\"Score\",\"Prediction\"))\n\nggplot(newEngland, aes(x= Week,y = `Point Differential`,color = Result)) +\n    geom_line() + geom_point()+ ggtitle(\"New England\")+ \n    scale_color_discrete(labels=c(\"Score\",\"Prediction\"))\n\nggplot(laRams, aes(x= Week,y = `Point Differential`,color = Result)) +\n    geom_line() + geom_point()+ ggtitle(\"Los Angeles Rams\")+ \n    scale_color_discrete(labels=c(\"Score\",\"Prediction\"))\n\nggplot(carolina, aes(x= Week,y = `Point Differential`,color = Result)) +\n    geom_line() + geom_point()+ ggtitle(\"Carolina\")+ \n    scale_color_discrete(labels=c(\"Score\",\"Prediction\"))\n\nggplot(chicago, aes(x= Week,y = `Point Differential`,color = Result)) +\n    geom_line() + geom_point()+ ggtitle(\"Chicago\")+ \n    scale_color_discrete(labels=c(\"Score\",\"Prediction\"))\n\nggplot(greenBay, aes(x= Week,y = `Point Differential`,color = Result)) +\n    geom_line() + geom_point()+ ggtitle(\"Green Bay\")+ \n    scale_color_discrete(labels=c(\"Score\",\"Prediction\"))\n\nggplot(newOrleans, aes(x= Week,y = `Point Differential`,color = Result)) +\n    geom_line() + geom_point()+ ggtitle(\"New Orleans\")+ \n    scale_color_discrete(labels=c(\"Score\",\"Prediction\"))\n\nggplot(tennessee, aes(x= Week,y = `Point Differential`,color = Result)) +\n    geom_line() + geom_point()+ ggtitle(\"Tennessee\")+ \n    scale_color_discrete(labels=c(\"Score\",\"Prediction\"))\n\nggplot(oakland, aes(x= Week,y = `Point Differential`,color = Result)) +\n    geom_line() + geom_point()+ ggtitle(\"Oakland\")+ \n    scale_color_discrete(labels=c(\"Score\",\"Prediction\"))\n\nggplot(minnesota, aes(x= Week,y = `Point Differential`,color = Result)) +\n    geom_line() + geom_point()+ ggtitle(\"Minnesota\")+ \n    scale_color_discrete(labels=c(\"Score\",\"Prediction\"))\n\nggplot(cleveland, aes(x= Week,y = `Point Differential`,color = Result)) +\n    geom_line() + geom_point()+ ggtitle(\"Cleveland\")+ \n    scale_color_discrete(labels=c(\"Score\",\"Prediction\"))\n\nggplot(atlanta, aes(x= Week,y = `Point Differential`,color = Result)) +\n    geom_line() + geom_point()+ ggtitle(\"Atlanta\")+ \n    scale_color_discrete(labels=c(\"Score\",\"Prediction\"))\n\nggplot(dallas, aes(x= Week,y = `Point Differential`,color = Result)) +\n    geom_line() + geom_point()+ ggtitle(\"Dallas\")+ \n    scale_color_discrete(labels=c(\"Score\",\"Prediction\"))\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```{r}\nscore_diff <- \"model{\n  #Data\n  for(i in 1:length(H_pts)) {\n    H_pts[i] ~ dpois(H_lam[i])\n    A_pts[i] ~ dpois(A_lam[i])\n  \n    log(H_lam[i]) <- h0 + b0 + b1*h_O[i] + b2*a_D[i] + theta[h[i]]\n    log(A_lam[i]) <- b0 + b1*a_O[i] + b2*h_D[i] + theta[a[i]]\n  }\n  \n\n\n  # Hierarchical Component\n  for(j in 1:32){\n    theta[j] ~ dnorm(0,tau)\n  }\n\n  \n  \n  #Priors\n  tau ~ dgamma(1,1/10)\n  h0 ~ dnorm(3,1/10)\n\n  b0 ~ dnorm(0,1/10)\n  b1 ~ dnorm(1,1/10)\n  b2 ~ dnorm(1,1/10)\n\n}\"\n\nscore_diff_jags <- jags.model(textConnection(score_diff),\n                              \ndata= list(H_pts = modelData$Home_Points, A_pts = modelData$Away_Points, h= modelData$Home_id, a= modelData$Away_id,h_D= modelData$Home_D_Points , h_O= modelData$Home_O_Points , a_D= modelData$Away_D_Points , a_O= modelData$Away_O_Points),\n\ninits=list(.RNG.name=\"base::Wichmann-Hill\", .RNG.seed=1989))\n\nscore_diff_sim <- coda.samples(score_diff_jags, variable.names=c(\"theta\",\"tau\",\"h0\",\"b0\",\"b1\",\"b2\"), n.iter=10000)\n   \nscore_diff_sample <- data.frame(step=1:10000, score_diff_sim[[1]])\nhead(score_diff_sample)\n```\n```{r}\nsummary(score_diff_sim)\nplot(score_diff_sim)\n```\n```{r}\nset.seed(13)\n\npredictScoreDiff <- function(modelDFRow){\n  predictions = \n    rpois(10000,exp(score_diff_sample$h0 + score_diff_sample$b0 + score_diff_sample$b1*modelDFRow$Home_O_Points + score_diff_sample$b2*modelDFRow$Away_D_Points + rnorm(score_diff_sample[,modelDFRow$Home_id + 6], sqrt(1/score_diff_sample$tau)))) - \n    rpois(10000, exp(score_diff_sample$b0 + score_diff_sample$b1*modelDFRow$Away_O_Points + score_diff_sample$b2*modelDFRow$Home_D_Points + rnorm(score_diff_sample[,modelDFRow$Away_id + 6],sqrt(1/score_diff_sample$tau))))\n\n}\n\ncomparePrediction <- function(modelDF){\n  accuracyVect = rep(0,nrow(modelDF))\n  for(i in 1:nrow(modelDF)){\n    scoreDiff = modelDF$Home_Points[i] - modelDF$Away_Points[i]\n    predictionsDF = data.frame(predictScoreDiff(modelDF[i,])) \n    meanPredictions = round(mean(predictionsDF[,1]))\n    accuracyVect[i] = round(scoreDiff - meanPredictions)\n  }\n  accuracyDF = data.frame(accuracyVect,abs(accuracyVect))\n  colnames(accuracyDF)<- c(\"Prediction Accuracy\",\"Error\")\n  return(accuracyDF)\n}\n\n```\n```{r}\npredictions2016 = comparePrediction(modelDF2016)\n# View(predictions2016)\n\nmean(predictions2016$`Prediction Accuracy`)\nmean(predictions2016$Error)\nggplot(predictions2016, aes(x=`Prediction Accuracy`)) + geom_histogram(binwidth = 3, aes(y=..density..))\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\nscore_diff <- \"model{\n  #Data\n  for(i in 1:length(H_pts)) {\n    H_pts[i] ~ dpois(h0 + H_lam[i])\n    A_pts[i] ~ dpois(A_lam[i])\n  \n    log(H_lam[i]) <- b0 + b1*h_O[i] + b2*a_D[i] + b3*h_OR[i] + b4*h_OP[i] + b5*a_DR[i] + b6*a_DP[i] + theta[h[i]]\n    log(A_lam[i]) <- b0 + b1*a_O[i] + b2*h_D[i] + b3*a_OR[i] + b4*a_OP[i] + b5*h_DR[i] + b6*h_DP[i] +theta[a[i]]\n  }\n  \n\n\n  # Hierarchical Component\n  for(j in 1:32){\n    theta[j] ~ dnorm(0,tau)\n  }\n\n  \n  \n  #Priors                                                                                                                       \n  tau ~ dgamma(1,1/10)\n  h0 ~ dnorm(3,1/10)\n\n  b0 ~ dnorm(0,1/10)\n  b1 ~ dnorm(5,1/10)\n  b2 ~ dnorm(-5,1/10)\n  b3 ~ dnorm(5,1/10)\n  b4 ~ dnorm(5,1/10)\n  b5 ~ dnorm(-5,1/10)\n  b6 ~ dnorm(-5,1/10)\n}\"\n\nscore_diff_jags <- jags.model(textConnection(score_diff),\n                              \ndata= list(H_pts = modelData$Home_Points, A_pts = modelData$Away_Points, h= modelData$Home_id, a= modelData$Away_id,h_D= modelData$Home_D_Points , h_O= modelData$Home_O_Points , a_D= modelData$Away_D_Points , a_O= modelData$Away_O_Points, h_OR = modelData$`Home_O_Net Rush`, h_OP = modelData$`Home_D_Net Pass`, h_DR = modelData$`Home_D_Net Rush`, h_DP = modelData$`Home_D_Net Pass`, a_OR = modelData$`Away_O_Net Rush`, a_OP = modelData$`Away_O_Net Pass`, a_DR = modelData$`Away_D_Net Rush`, a_DP = modelData$`Away_D_Net Pass`),\n\ninits=list(.RNG.name=\"base::Wichmann-Hill\", .RNG.seed=1989))\n\nscore_diff_sim <- coda.samples(score_diff_jags, variable.names=c(\"theta\",\"tau\",\"h0\",\"b0\", \"b1\",\"b2\", \"b3\", \"b4\", \"b5\", \"b6\"), n.iter=10000)\n   \nscore_diff_sample <- data.frame(step=1:10000, score_diff_sim[[1]])\nhead(score_diff_sample)\n```\n```{r}\nsummary(score_diff_sim)\nplot(score_diff_sim)\n```\n```{r}\nset.seed(13)\n\npredictScoreDiff <- function(modelDFRow){\n  predictions = \n    rpois(10000,exp(score_diff_sample$h0 + score_diff_sample$b0 + score_diff_sample$b1*modelDFRow$Home_O_Points + score_diff_sample$b2*modelDFRow$Away_D_Points + rnorm(score_diff_sample[,modelDFRow$Home_id + 6], sqrt(1/score_diff_sample$tau)))) - \n    rpois(10000, exp(score_diff_sample$b0 + score_diff_sample$b1*modelDFRow$Away_O_Points + score_diff_sample$b2*modelDFRow$Home_D_Points + rnorm(score_diff_sample[,modelDFRow$Away_id + 6],sqrt(1/score_diff_sample$tau))))\n\n}\n\ncomparePrediction <- function(modelDF){\n  accuracyVect = rep(0,nrow(modelDF))\n  for(i in 1:nrow(modelDF)){\n    scoreDiff = modelDF$Home_Points[i] - modelDF$Away_Points[i]\n    predictionsDF = data.frame(predictScoreDiff(modelDF[i,])) \n    meanPredictions = mean(predictionsDF[,1])\n    accuracyVect[i] = round(scoreDiff - meanPredictions)\n  }\n  accuracyDF = data.frame(accuracyVect)\n  colnames(accuracyDF)[1]<- \"Prediction Accuracy\"\n  return(accuracyDF)\n}\n```\n```{r}\npredictions2016 = comparePrediction(modelDF2016)\n# View(predictions2016)\n\nmean(predictions2016$`Prediction Accuracy`)\nggplot(predictions2016, aes(x=`Prediction Accuracy`)) + geom_histogram(binwidth = 3, aes(y=..density..))\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1519876874976.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1366674663",
    "id" : "17147AD2",
    "lastKnownWriteTime" : 1519700706,
    "last_content_update" : 1519878710226,
    "path" : "~/BayesStats_Project/New Models.Rmd",
    "project_path" : "New Models.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}