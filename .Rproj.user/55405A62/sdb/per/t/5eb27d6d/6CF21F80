{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Main\"\nauthor: \"Brett Graham\"\ndate: \"11/14/2017\"\noutput: html_document\n---\n```{r}\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(lubridate)\nlibrary(readr)\nlibrary(igraph)\n```\n### Functions\n```{r}\nmodifyWeek <- function(dataframe){\n#Modifies week variable from a string to a number\n  modifiedData <- dataframe\n  week <- dataframe$`Week`\n  \n  weekNum <- extract_numeric(week)\n  wildcard <- grepl(\"Wild\",week)\n  division <- grepl(\"Divisional\",week)\n  conference <- grepl(\"Conference\",week)\n  super <- grepl(\"Super\",week)\n\n  for(i in 1:length(weekNum)){\n    if(is.na(weekNum[i])){\n      if(wildcard[i]){\n        weekNum[i] <- 18\n      } else if(division[i]){\n        weekNum[i]<-19\n      } else if(conference[i]){\n        weekNum[i]<-20\n      } else if(super[i]){\n        weekNum[i] <-21\n      }\n    }\n  }\n  \n  modifiedData$`Week` <- weekNum\n  return(modifiedData)\n}\n\nsimplify <- function(dataframe){\n#Modifies the full dataset to only include columns of interest\n \n   modifiedData <- dataframe %>%  \n    select(Date:Home_Points,contains('Home_Net Yards Rushing'):contains('Home_Avg. Yds/Att'),Away_Team,Away_Points,contains('Away_Net Yards Rushing'):contains('Away_Avg. Yds/Att'),-contains('Home_Sacked'):-contains('Home_Gross'),-contains('Away_Sacked'):-contains('Away_Gross')) %>%\n    separate(`Away_Att - Comp - Int`,c('Away_Att','Away_Comp','Away_Int')) %>%\n    separate(`Home_Att - Comp - Int`,c('Home_Att','Home_Comp','Home_Int')) %>%\n    select(-`Home_Comp`,-`Home_Int`,-`Away_Comp`,-`Away_Int`) \n \n\n  \n  #Converts vectors that are not numbers to characters\n  modifiedData[,c(1,3,11)] <- data.frame(apply(modifiedData[,c(1,3,11)], 2, as.factor))\n  modifiedData[,c(1,3,11)] <- data.frame(apply(modifiedData[,c(1,3,11)], 2, as.character))\n\n  \n  #Converts vectors that contain numbers to type double\n  numVectors = (1:ncol(modifiedData))[-c(1,2,3,11)]\n  modifiedData[,numVectors] <- data.frame(apply(modifiedData[,numVectors], 2, as.factor))\n  modifiedData[,numVectors] <- data.frame(apply(modifiedData[,numVectors], 2, as.numeric))\n  \n  \n  \n\n\n  \n  #Adjust Average Passing Yards/Attempt Stat to Net yards, not Gross yards\n  modifiedData$`Home_Pass Gain/Att` = modifiedData$`Home_Net Yards Passing`/modifiedData$`Home_Att`\n  modifiedData$`Away_Pass Gain/Att` = modifiedData$`Away_Net Yards Passing`/modifiedData$`Away_Att`\n  \n  modifiedData <- modifyWeek(modifiedData)\n  modifiedData <- modifiedData[,c(1:9,19,11:17,20,10,18)]\n  modifiedData <- modifiedData[,-c(19,20)]\n  \n  modifiedData <- modifiedData %>%\n    mutate_each_( funs(as.character(.)), names( .[,sapply(., is.factor)] ))\n\n  return(modifiedData)\n}\n```\n```{r}\ndataToGraph <- function(dataframe,week,stat){\n#Convert the season data to a graph format\n#week is the last week that you have data for i.e. use week = 7 to make predictions for week 8\n#stat is the column number of the home stat that you want to observe\n  \n  homeCol = stat\n  awayCol = stat + 8\n  \n  modifiedData <- dataframe %>%\n    filter(Week < week) %>%\n    select(Home_Team,Away_Team,homeCol,awayCol) \n  \n  home_data = modifiedData[,-c(4)]\n  colnames(home_data)[3] = 'weight'\n  away_data = modifiedData[,c(2,1,4,3)]\n  away_data = away_data[,-c(4)]\n  colnames(away_data)[3] = 'weight'\n\n  \n  h = graph.data.frame(home_data,directed = TRUE)\n  h$weight <- home_data[,3]\n  a = graph.data.frame(away_data,directed=TRUE)\n  a$weight <- away_data[,3]\n  \n  g = union(h,a)\n  \n  E(g)$weight_1[is.na(E(g)$weight_1)]<-0\n  E(g)$weight_2[is.na(E(g)$weight_2)]<-0\n  E(g)$weight <- E(g)$weight_1 +E(g)$weight_2\n  \n  g<- delete_edge_attr(g,'weight_1')\n  g<- delete_edge_attr(g,'weight_2')\n\n  \n  return(g)\n}\n```\n```{r}\ninitOffenseDefense = function(graph) {\n  num_vertices = length(V(graph))\n  offense = rep(1,num_vertices)\n  defense = rep(1,num_vertices)\n  list(offense=offense,defense=defense)\n}\n\n\n\n```\n\n```{r}\n\nupdate = function(A,o,games_ratios) {\n  (t(A) %*% (1/(games_ratios*(A %*% (1/o)))))* games_ratios \n}\n\nrun_alg = function(A,o,games_ratios,epsilon = 0.5*10^-4) {\n  diff = Inf\n  while(diff > epsilon) {\n    new_o = update(A,o,games_ratios)\n    diff = sqrt(t(new_o - o) %*% (new_o - o))\n    o = new_o\n  }\n  return(o)\n}\n\nget_games_ratios = function(g) {\n  max(degree(g))/degree(g)\n}\nget_defense = function(A,o,games_ratios) {\n  (A %*% (1/o)) * games_ratios\n}\n\n\ncalculateOD <- function(g, e = .5*10^-5){\n  #initialize offense vectors to have every team with an offensive score of 1\n  offense = rep(1,length(V(g)))\n  \n  Adj = as.matrix(get.adjacency(g,attr='weight'))\n  Adj = Adj + e*(offense %*% t(offense) - diag(length(V(g))))\n  Adj = t(Adj)\n\n  games_ratios = get_games_ratios(g)\n  \n  final_offense = run_alg(Adj, offense,games_ratios,epsilon = e)\n  final_defense = get_defense(Adj,final_offense,games_ratios)\n  \n  # offenseVect = final_offense - mean(final_offense)\n  offenseVect =final_offense / sum(final_offense)\n  offenseVect = offenseVect - mean(offenseVect)\n  # offenseVect = offenseVect[order(offenseVect,decreasing = TRUE),,drop=FALSE]\n  \n  defenseVect = 1/(final_defense) \n  defenseVect = defenseVect/sum(defenseVect)\n  defenseVect = defenseVect - mean(defenseVect)\n  # defenseVect = defenseVect[order(defenseVect,decreasing = TRUE),,drop=FALSE]\n  \n  return(list(offense = offenseVect, defense = defenseVect))\n}\n\ncreateODDF <- function(rawData){\n  data <- simplify(rawData)\n\n  teamData <- data.frame()\n  \n  #calculate OD \n  columns = c(5,7,8,10)\n  for(i in 2:max(data$Week)){\n  #Create DF based on OD for points\n    OD <- calculateOD(dataToGraph(data,i,4))\n    offense <-OD$offense\n    defense <- OD$defense\n    \n    week = rep(i,length(offense))\n    teams <- names(offense[,1])\n    \n    weeklyDF <- data.frame(week,teams,offense,defense)\n\n    for(j in columns){\n    #Expand this DF to include OD for other stats\n      OD <- calculateOD(dataToGraph(data,i,j))\n      offense <-OD$offense\n      defense <- OD$defense\n      \n      week = rep(i,length(offense))\n      teams <- names(offense[,1])\n      w <- data.frame(week,teams,offense,defense)\n      \n      weeklyDF <- weeklyDF %>%\n        left_join(w,by= c(\"week\"=\"week\",\"teams\" = \"teams\"))\n    }\n    \n    teamData <- teamData %>%\n      bind_rows(weeklyDF)\n  }\n  \n  colnames(teamData) <- c(\"Week\",'Team',\"O_Points\",\"D_Points\",\"O_Net Rush\",\"D_Net Rush\",\"O_Avg Rush\",\"D_Avg Rush\",\"O_Net Pass\",'D_Net Pass','O_Avg Pass','D_Avg Pass')\n  \n  return(teamData)\n}\n\n\n# OD_2016 <-createODDF(game_stats_2016)\n# View(OD_2016)\n\nOD_2017 <-calculateOD(dataToGraph(simplify(game_stats_2017),20,4))\nView(OD_2017)\n```\n```{r}\n# g = dataToGraph(data_2016,23,6)\n# Adj = as.matrix(get.adjacency(g,attr='weight'))\n```\n\n\n\n```{r}\ncreateOffensiveData <- function(gameData){\n  \n  homeData = gameData[,c(1:10)]\n  awayData = gameData[,c(1:2,11:18)]\n  \n  home_names = c(colnames(homeData)[1:2],unlist(strsplit(colnames(homeData[3:length(colnames(homeData))]), split='_', fixed=TRUE))[seq(2,16,by=2)])\n  colnames(homeData) = home_names\n  colnames(awayData) = home_names\n  \n  modifiedData = bind_rows(awayData,homeData)\n  \n  modifiedData <- modifiedData %>%\n    group_by(Team) %>%\n    arrange(Team,Week) %>%\n    mutate(`cumavg rush` = cummean(`Avg Rush Gain`)) %>%\n    mutate(`cumavg pass` = cummean(`Pass Gain/Att`)) %>%\n    mutate(`cumavg total rush` = cummean(`Net Yards Rushing`)) %>%\n    mutate(`cumavg total pass` = cummean(`Net Yards Passing`)) %>%\n    mutate('Next Week' = `Week`+1 )\n  \n  modifiedData <- modifiedData[,-c(4:10)]\n  modifiedData <- modifiedData[,c(8,3:7,1:2)]\n  modifiedData <-modifiedData[,-c(7:8)]\n  \n  colnames(modifiedData)[3:6] = paste0(\"Offense \", colnames(modifiedData)[3:6])\n  \n  \n  \n  #Missing infrormation for after the team's bye week\n  for(i in 2:nrow(modifiedData))\n    if(modifiedData$`Next Week`[i-1] + 2 == modifiedData$`Next Week`[i]){\n      newRow = modifiedData[i-1,]\n      newRow$`Next Week` = modifiedData[i-1,]$`Next Week` +1\n      \n      modifiedData <- bind_rows(modifiedData,newRow)\n    }\n  \n  modifiedData <- modifiedData %>% \n    arrange(Team,`Next Week`)\n\n  \n  \n  return(modifiedData)\n}\n```\n```{r}\ncreateDefensiveData <- function(gameData){\n  homeData = gameData[,c(1:3,12:18)]\n  awayData = gameData[,c(1:2,11,4:10)]\n  \n  home_names = c(colnames(homeData)[1:2],unlist(strsplit(colnames(homeData[3:length(colnames(homeData))]), split='_', fixed=TRUE))[seq(2,16,by=2)])\n  colnames(homeData) = home_names\n  colnames(awayData) = home_names\n\n  modifiedData = bind_rows(awayData,homeData)\n\n  modifiedData <- modifiedData %>%\n    group_by(Team) %>%\n    arrange(Team,Week) %>%\n    mutate(`cumavg rush` = cummean(`Avg Rush Gain`)) %>%\n    mutate(`cumavg pass` = cummean(`Pass Gain/Att`)) %>%\n    mutate(`cumavg total rush` = cummean(`Net Yards Rushing`)) %>%\n    mutate(`cumavg total pass` = cummean(`Net Yards Passing`)) %>%\n    mutate('Next Week' = `Week`+1 )\n\n  modifiedData <- modifiedData[,-c(4:10)]\n  modifiedData <- modifiedData[,c(8,3:7,1:2)]\n  modifiedData <-modifiedData[,-c(7:8)]\n  \n  colnames(modifiedData)[3:6] = paste0(\"Defense \", colnames(modifiedData)[3:6])\n\n\n\n  #Missing infrormation for after the team's bye week\n  for(i in 2:nrow(modifiedData))\n    if(modifiedData$`Next Week`[i-1] + 2 == modifiedData$`Next Week`[i]){\n      newRow = modifiedData[i-1,]\n      newRow$`Next Week` = modifiedData[i-1,]$`Next Week` +1\n\n      modifiedData <- bind_rows(modifiedData,newRow)\n    }\n\n  modifiedData <- modifiedData %>%\n    arrange(Team,`Next Week`)\n\n  \n  \n  return(modifiedData)\n}\n\ncreateTeamData <- function(gameData){\n  defenseData <- createDefensiveData(gameData)\n  offenseData <- createOffensiveData(gameData)\n  \n  teamData <- offenseData %>%\n    left_join(defenseData, by= c(\"Next Week\"=\"Next Week\",\"Team\" = \"Team\"))\n  \n  return(teamData)\n\n\n}\n\n```\n\n\n```{r}\ncreateModelDF <- function(rawDataframe, prevYearRawDataframe){\n  game_data <- simplify(rawDataframe)\n  \n\n  \n  OD_dataframe <- createODDF(rawDataframe) %>%\n      select(Week,Team,contains(\"O_\"),contains(\"D_\"))\n  \n  prev_OD_dataframe <- createODDF(prevYearRawDataframe) %>%\n    select(Week,Team,contains(\"Points\")) %>%\n    filter(Week>20) %>%\n    rename(`O_Points_Last_Year` = O_Points) %>%\n    rename(`D_Points_Last_Year` = D_Points) %>%\n    select(-Week)    \n\n  \n  \n  OD_dataframe$Team = as.character(OD_dataframe$Team)\n  prev_OD_dataframe$Team = as.character(prev_OD_dataframe$Team)\n  \n  #Account for team name changes\n  \n  \n  oldTeam = c(\"St. Louis\",\"Los Angeles\",\"San Diego\")\n  newTeam = c(\"Los Angeles\",\"LA Rams\",\"LA Chargers\")\n  for(i in 1:length(oldTeam)){\n    game_data[ game_data == oldTeam[i] ] <- newTeam[i]\n    OD_dataframe[OD_dataframe==oldTeam[i]]<- newTeam[i]\n    prev_OD_dataframe[prev_OD_dataframe==oldTeam[i]]<-newTeam[i]\n  }\n  \n  \n  \n  game_id = data.frame(1:nrow(game_data))\n  \n  team_names <- game_data %>%\n    group_by(Home_Team) %>%\n    summarise() \n  \n  colnames(team_names)<- \"Team\"\n  \n  team_id = data.frame(1:nrow(team_names))\n  \n  team_ids <- bind_cols(team_names,team_id)\n  home_ids <- team_ids \n  colnames(home_ids)[2] = \"Home_id\"\n  away_ids <- team_ids\n  colnames(away_ids)[2] = \"Away_id\"\n  game_data <- game_data %>%\n    left_join(home_ids,by = c(\"Home_Team\" = \"Team\")) %>%\n    left_join(away_ids,by = c(\"Away_Team\"= \"Team\")) %>% \n    select(Date,Week,Home_Team,Home_id,Home_Points,Away_Team,Away_id,Away_Points)\n  \n\n  \n\n  \n  \n  H_data <- OD_dataframe \n  A_data <- OD_dataframe\n  \n  H_prev <- prev_OD_dataframe\n  A_prev <- prev_OD_dataframe\n  \n  colnames(H_data)[1:ncol(H_data)] <- paste0(\"Home_\",colnames(H_data)[1:ncol(H_data)])\n  colnames(A_data)[1:ncol(A_data)] <- paste0(\"Away_\",colnames(A_data)[1:ncol(A_data)])\n  \n  colnames(H_prev)[1:ncol(H_prev)] <- paste0(\"Home_\",colnames(H_prev)[1:ncol(H_prev)])\n  colnames(A_prev)[1:ncol(A_prev)] <- paste0(\"Away_\",colnames(A_prev)[1:ncol(A_prev)])\n  \n  \n  game_data <- game_data %>%\n    bind_cols(game_id) %>%\n    left_join(H_data,by = c(\"Week\" = \"Home_Week\", \"Home_Team\"=\"Home_Team\")) %>%\n    left_join(H_prev,by = c(\"Home_Team\"=\"Home_Team\")) %>%\n    left_join(A_data,by = c(\"Week\" = \"Away_Week\", \"Away_Team\"=\"Away_Team\")) %>%\n    left_join(A_prev,by = c(\"Away_Team\"=\"Away_Team\")) %>%\n    select(Date,Week,contains(\"Home_\"),contains(\"Away_\")) %>%\n    filter(Week >3) %>%\n    arrange(Week,Home_Team)\n  \n  binnedWeeks <- rep(0, nrow(game_data))\n  weeks <- game_data$Week\n  # for(i in 1:length(weeks)){\n  #   if(weeks[i]>=1 & weeks[i]<=5){\n  #     binnedWeeks[i]=1\n  #   } else if(weeks[i]>=6 & weeks[i]<=10){\n  #     binnedWeeks[i] = 2\n  #   } else if(weeks[i]>=11 & weeks[i] <=14){\n  #     binnedWeeks[i] = 3\n  #   } else{\n  #     binnedWeeks[i] = 4\n  #   }\n  # }\n  \n  for(i in 1:length(weeks)){\n    if(weeks[i]>=1 & weeks[i]<=5){\n      binnedWeeks[i] = 1\n    } else if(weeks[i]>=5 & weeks[i] <=10){\n      binnedWeeks[i] = 2\n    } else{\n      binnedWeeks[i] = 3\n    }\n  }\n  binnedWeeks <-data.frame(binnedWeeks)\n  colnames(binnedWeeks)<- \"binnedWeeks\"\n  \n  game_data <- bind_cols(game_data,binnedWeeks)\n  \n  return(game_data)\n}\n\n\n# View(createModelDF(game_stats_2016,game_stats_2015))\n# View(createModelDF(game_stats_2015,game_stats_2014))\n\n\n```\n```{r}\n\nod2017 <-createODDF(game_stats_2017)\n# View(od2017)\n```\n\n\n\nwrite.csv(modelDF2016,\"modelData2016.csv\")\n\n\n```{r}\n# data_2014 <-simplify(game_stats_2016)\n# data_2015 <-simplify(game_stats_2016)\n# data_2016 <-simplify(game_stats_2016)\n# data_2017 <-simplify(game_stats_2016)\n\n# modelDF2011 <- createModelDF(game_stats_2011,game_stats_2010)\n# modelDF2012 <- createModelDF(game_stats_2012,game_stats_2011)\n# modelDF2013 <- createModelDF(game_stats_2013,game_stats_2012)\n# modelDF2014 <- createModelDF(game_stats_2014,game_stats_2013)\n# modelDF2015 <- createModelDF(game_stats_2015,game_stats_2014)\n# modelDF2016 <- createModelDF(game_stats_2016,game_stats_2015)\nmodelDF2017 <- createModelDF(game_stats_2017,game_stats_2016)\n```\n\n```\n#Data filtered to later weeks to avoid noise\n\nmodelData <-modelDF2015 %>% \n  bind_rows(modelDF2014) %>%\n  bind_rows(modelDF2013) %>%\n  bind_rows(modelDF2012) %>%\n  bind_rows(modelDF2011)\n\n```\n\n\n\n\n\n\n\n\n\n\n\n#TESTING LINEAR MODELS -- NOT IMPORTANT\n```\nmodel <- lm(Home_Points ~ Home_O_Points + Away_D_Points + `Home_O_Net Rush` + `Home_O_Net Pass` + `Away_D_Net Rush` +`Away_D_Net Pass` ,data = modelData)\nsummary(model)\n```\n```\nmodel <- lm(Home_Points - Away_Points ~ (Home_O_Points -  Away_D_Points) + (Away_O_Points - Home_D_Points) + (`Home_O_Net Rush`-`Away_D_Net Rush`) + (`Home_O_Net Pass`-`Away_D_Net Pass`) ,data = modelData)\nsummary(model)\n```\n\n\n\n\n```\nmodel <- lm(Home_Points + Away_Points ~ (Home_O_Points -  Away_D_Points) + (Away_O_Points - Home_D_Points) ,data = modelData)\nsummary(model)\n```\n\n```\nmodel <- lm(Home_Points - Away_Points ~ (Home_O_Points -  Away_D_Points) + (Away_O_Points - Home_D_Points) + (`Home_O_Avg Rush`-`Away_D_Avg Rush`) + (`Home_O_Net Pass`-`Away_D_Net Pass`) ,data = modelData)\nsummary(model)\n```\n\n\n\n\n\n\n```\nmodel <- lm(Home_Points - Away_Points ~ (Home_O_Points -  Away_D_Points) + (Away_O_Points - Home_D_Points),data = modelData)\nsummary(model)\n```\n\n\n\n\n\n```\nmodel <- lm(Home_Points - Away_Points ~ (Home_O_Points -  Away_D_Points) + (Away_O_Points - Home_D_Points) + (Home_O_Points_Last_Year - Away_D_Points_Last_Year) + (Away_O_Points_Last_Year - Home_D_Points_Last_Year),data = modelData)\nsummary(model)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1512679475609.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2405993986",
    "id" : "6CF21F80",
    "lastKnownWriteTime" : 1518496799,
    "last_content_update" : 1518496799904,
    "path" : "~/BayesStats_Project/Main.Rmd",
    "project_path" : "Main.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}