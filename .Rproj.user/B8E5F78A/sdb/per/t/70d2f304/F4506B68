{
    "collab_server" : "",
    "contents" : "---\ntitle: \"complete code\"\nauthor: \"Gunnar Goeden & Brett Graham\"\ndate: \"12/17/2017\"\noutput: html_document\n---\n\n\n```{r}\nlibrary(xml2)\nlibrary(rvest)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(lubridate)\n```\n\n\nhttps://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf\n\n\n##2015 Team & Score Data (first webpage)\n```{r}\nurl2015 <- 'http://www.footballdb.com/games/index.html?lg=NFL&yr=2015'\nwebpage2015 <- read_html(url2015)\n\ndate15_html <- html_nodes(webpage2015,'td:nth-child(1) .hidden-xs')\ndate15_data <- html_text(date15_html)\n\nvisitteam15_html <- html_nodes(webpage2015,'td:nth-child(2) .hidden-xs')\nvisitteam15_data <- html_text(visitteam15_html)\n\nvisitscore15_html <- html_nodes(webpage2015,'#leftcol .center:nth-child(3)')\nvisitscore15_data <- html_text(visitscore15_html)\nvisitscore15_data <-as.numeric(visitscore15_data)\n\nhometeam15_html <- html_nodes(webpage2015,'.center+ td > .hidden-xs')\nhometeam15_data <- html_text(hometeam15_html)\n\nhomescore15_html <- html_nodes(webpage2015,'.center:nth-child(5)')\nhomescore15_data <- html_text(homescore15_html)\nhomescore15_data <-as.numeric(homescore15_data)\n\nfbscores2015 <- data.frame(Date = date15_data, Visiting_Team = visitteam15_data, Visiting_Score = visitscore15_data, Home_Team = hometeam15_data, Home_Score = homescore15_data)\n#fbscores2015\n```\n\n##2016 Team & Score Data \n```{r}\nurl2016 <- 'http://www.footballdb.com/games/index.html?lg=NFL&yr=2016'\nwebpage2016 <- read_html(url2016)\n\ndate16_html <- html_nodes(webpage2016,'td:nth-child(1) .hidden-xs')\ndate16_data <- html_text(date16_html)\n\nvisitteam16_html <- html_nodes(webpage2016,'td:nth-child(2) .hidden-xs')\nvisitteam16_data <- html_text(visitteam16_html)\n\nvisitscore16_html <- html_nodes(webpage2016,'#leftcol .center:nth-child(3)')\nvisitscore16_data <- html_text(visitscore16_html)\nvisitscore16_data <-as.numeric(visitscore16_data)\n\nhometeam16_html <- html_nodes(webpage2016,'.center+ td > .hidden-xs')\nhometeam16_data <- html_text(hometeam16_html)\n\nhomescore16_html <- html_nodes(webpage2016,'.center:nth-child(5)')\nhomescore16_data <- html_text(homescore16_html)\nhomescore16_data <-as.numeric(homescore16_data)\n\nfbscores2016 <- data.frame(Date = date16_data, Visiting_Team = visitteam16_data, Visiting_Score = visitscore16_data, Home_Team = hometeam16_data, Home_Score = homescore16_data)\n#fbscores2016\n```\n\n##2017 Team & Score Data \n```{r}\nurl2017 <- 'http://www.footballdb.com/games/index.html?lg=NFL&yr=2017'\nwebpage2017 <- read_html(url2017)\n\ndate17_html <- html_nodes(webpage2017,'td:nth-child(1) .hidden-xs')\ndate17_data <- html_text(date17_html)\ndate17_data <- as.Date(date17_data,\"%m/%d/%Y\")\n\nvisitteam17_html <- html_nodes(webpage2017,'td:nth-child(2) .hidden-xs')\nvisitteam17_data <- html_text(visitteam17_html)\n\nvisitscore17_html <- html_nodes(webpage2017,'#leftcol .center:nth-child(3)')\nvisitscore17_data <- html_text(visitscore17_html)\nvisitscore17_data <-as.numeric(visitscore17_data)\n\nhometeam17_html <- html_nodes(webpage2017,'.center+ td > .hidden-xs')\nhometeam17_data <- html_text(hometeam17_html)\n\nhomescore17_html <- html_nodes(webpage2017,'.center:nth-child(5)')\nhomescore17_data <- html_text(homescore17_html)\nhomescore17_data <-as.numeric(homescore17_data)\n\nfbscores2017 <- data.frame(Date = date17_data, Visiting_Team = visitteam17_data, Visiting_Score = visitscore17_data, Home_Team = hometeam17_data, Home_Score = homescore17_data)\n#fbscores2017\n```\n\n```{r}\ndate_html <- html_nodes(webpage2017,'td:nth-child(1) .hidden-xs , .divheader')\ndate_data <- html_text(date_html)\n#date_data\n\nweek <- rep(0,256)\nif (date17_data >= \"2017-09-14\") week=1 else week=0\nmutate(fbscores2017, Week=week)\n\n#date17_data\n#week <- rep(0,50)\n\n```\n\n\n```{r}\nurl <- \"http://www.footballdb.com/games/boxscore.html?gid=2017091001\"\n\n#Reading the HTML code from the website\nwebpage <- read_html(url)\n\ntitle_data_html <- html_nodes(webpage,\"#divBox_team tbody .left\")\ntitle_data <- html_text(title_data_html)\ntitle_data <- append(c(\"Team\", \"Points\"), title_data)\n\n# #Create boxscore \n# boxscore <- data.frame(Category = title_data, Home = home_data, Away = away_data)\n\n#Create game event (single row that describes game)\nhome_variables <- paste0(rep(\"Home_\",length(title_data)),title_data)\naway_variables <- paste0(rep(\"Away_\",length(title_data)),title_data)\nevent_variables <- append(home_variables,away_variables)\nevent_variables <- append(c(\"Date\",\"Week\"),event_variables)\n\nlength(event_variables)\n\n```\n\n```{r}\ncreateDateVector <- function(year){\n  url <- paste0('http://www.footballdb.com/games/index.html?lg=NFL&yr=',toString(year))\n  webpage <- read_html(url)\n  date_html <- html_nodes(webpage,'td:nth-child(1) .hidden-xs')\n  date_data <- html_text(date_html)\n  dateVect <- as.Date(date_data,\"%m/%d/%Y\")\n  \n  today = today()\n  daysBeforeToday = dateVect <today\n  dateVect = dateVect[daysBeforeToday]\n}\n```\n\n```{r}\ndateToURL <- function(dateVect, i, adjustment=0){\n  url_base <- 'http://www.footballdb.com/games/boxscore.html?gid='\n  url_year = year(dateVect[i])\n  if(month(dateVect[i])<10){\n    url_month <- paste0(\"0\",month(dateVect[i]))\n  }else{\n    (url_month <-toString(month(dateVect[i])))\n   }\n  if(day(dateVect[i])<10){\n    url_day <- paste0(\"0\",day(dateVect[i]))\n  }else{\n    url_day <-toString(day(dateVect[i]))\n  }\n  \n  gameNum = 1\n  location = i-1\n  if(location >0){\n    while(dateVect[i]==dateVect[location]){\n      gameNum = gameNum+1\n      location=location-1\n      \n      if(location==0){\n        break\n      }\n    }\n  }\n  \n  gameNum = gameNum + adjustment\n  \n  if(gameNum<10){\n    url_gamenum <- paste0(\"0\",toString(gameNum))\n  }else{\n    url_gamenum <-toString(gameNum)\n  }\n\n  url <- paste0(url_base,url_year,url_month,url_day,toString(url_gamenum))\n\n  \n  return(list(url=url,url_year=url_year,url_month = url_month,url_day=url_day))\n}\n```\n```{r}\nyearlyStats <- function(dateVect){\n  data = matrix(rep('',length(event_variables)),nrow=1)\n  \n  for(i in 1:length(dateVect)){\n\n\n    url_info <- dateToURL(dateVect,i)\n    url <- url_info$url\n    \n    webpage <- read_html(url)\n  \n  \n    away_data_html <- html_nodes(webpage,'#divBox_team .row1 .left+ td , .section_left .left+ td .hidden-xs , #divBox_team .row0 .left+ td')\n    away_data <- html_text(away_data_html)\n    away_points <- html_text(html_nodes(webpage,'#leftcol .header+ .center td+ td b'))\n    away_data <- append(away_data,away_points, after = 1)\n  \n    home_data_html <- html_nodes(webpage,\"#divBox_team .row1 .left~ td+ td , #divBox_team .row0 .left~ td+ td , .section_left .left~ td+ td .hidden-xs\")\n    home_data <- html_text(home_data_html)\n    home_points <- html_text(html_nodes(webpage,'#leftcol .row0+ .center td+ td b'))\n    home_data <- append(home_data,home_points, after = 1)\n    \n    week_info <- html_text(html_nodes(webpage,'#breadcrumbs a~ a+ a'))\n  \n    date = paste0(url_info$url_month,\"/\",url_info$url_day,\"/\",url_info$url_year)\n    date = append(date,week_info)\n    game_data = append(date,home_data)\n    game_data = append(game_data,away_data)\n    \n    \n    \n    adjustment = 1\n    while(length(game_data)==2 |length(game_data)==1){\n      url <- dateToURL(dateVect,i,adjustment = adjustment)$url\n    \n      webpage <- read_html(url)\n    \n      away_data_html <- html_nodes(webpage,'#divBox_team .row1 .left+ td , .section_left .left+ td .hidden-xs , #divBox_team .row0 .left+ td')\n      away_data <- html_text(away_data_html)\n      away_points <- html_text(html_nodes(webpage,'#leftcol .header+ .center td+ td b'))\n      away_data <- append(away_data,away_points, after = 1)\n    \n      home_data_html <- html_nodes(webpage,\"#divBox_team .row1 .left~ td+ td , #divBox_team .row0 .left~ td+ td , .section_left .left~ td+ td .hidden-xs\")\n      home_data <- html_text(home_data_html)\n      home_points <- html_text(html_nodes(webpage,'#leftcol .row0+ .center td+ td b'))\n      home_data <- append(home_data,home_points, after = 1)\n      \n      week_info <- html_text(html_nodes(webpage,'#breadcrumbs a~ a+ a'))\n\n    \n      date = paste0(url_info$url_month,\"/\",url_info$url_day,\"/\",url_info$url_year)\n      date = append(date,week_info)\n      game_data = append(date,home_data)\n      game_data = append(game_data,away_data)\n    \n      adjustment = adjustment+1\n    \n    \n      if(adjustment >100){\n        print(\"ERROR: ADJUSTMENT TOO LARGE\")\n        print(i)\n        break\n      }\n  \n    }\n    data = rbind(data,game_data)\n  \n  }\n  return(data)\n}\n```\n```{r}\ncreateDataframe <- function(year){\n  dateVect = createDateVector(year)\n  data_mat = yearlyStats(dateVect)\n  data_mat = data_mat[-1,]\n  game_stats <- data.frame(data_mat)\n  names(game_stats)[1:length(event_variables)] <- event_variables\n  names(game_stats)[c(12,40)] <- c('Home_Avg Rush Gain','Away_Avg Rush Gain')\n  return(game_stats)\n    \n}\n```\n```{r}\n game_stats_2010 <- createDataframe(2010)\ngame_stats_2010<- game_stats_2010[-c(208,240),]\n\ngame_stats_2011 <- createDataframe(2011)\n game_stats_2012 <- createDataframe(2012)\ngame_stats_2013 <- createDataframe(2013)\ngame_stats_2014 <- createDataframe(2014)\ngame_stats_2014<- game_stats_2014[-176,]\ngame_stats_2015 <- createDataframe(2015)\ngame_stats_2016 <- createDataframe(2016)\n# game_stats_2017 <- createDataframe(2017)\n#View(game_stats_2010)\n```\n```{r}\n# date_2017 <- createDateVector(2017)\n# dateToURL(date_2017,length(date_2017)-1)\n\n\n```\n\n```{r}\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(lubridate)\nlibrary(readr)\nlibrary(igraph)\n```\n### Functions\n```{r}\nmodifyWeek <- function(dataframe){\n#Modifies week variable from a string to a number\n  modifiedData <- dataframe\n  week <- dataframe$`Week`\n  \n  weekNum <- extract_numeric(week)\n  wildcard <- grepl(\"Wild\",week)\n  division <- grepl(\"Divisional\",week)\n  conference <- grepl(\"Conference\",week)\n  super <- grepl(\"Super\",week)\n\n  for(i in 1:length(weekNum)){\n    if(is.na(weekNum[i])){\n      if(wildcard[i]){\n        weekNum[i] <- 18\n      } else if(division[i]){\n        weekNum[i]<-19\n      } else if(conference[i]){\n        weekNum[i]<-20\n      } else if(super[i]){\n        weekNum[i] <-21\n      }\n    }\n  }\n  \n  modifiedData$`Week` <- weekNum\n  return(modifiedData)\n}\n\nsimplify <- function(dataframe){\n#Modifies the full dataset to only include columns of interest\n \n   modifiedData <- dataframe %>%  \n    select(Date:Home_Points,contains('Home_Net Yards Rushing'):contains('Home_Avg. Yds/Att'),Away_Team,Away_Points,contains('Away_Net Yards Rushing'):contains('Away_Avg. Yds/Att'),-contains('Home_Sacked'):-contains('Home_Gross'),-contains('Away_Sacked'):-contains('Away_Gross')) %>%\n    separate(`Away_Att - Comp - Int`,c('Away_Att','Away_Comp','Away_Int')) %>%\n    separate(`Home_Att - Comp - Int`,c('Home_Att','Home_Comp','Home_Int')) %>%\n    select(-`Home_Comp`,-`Home_Int`,-`Away_Comp`,-`Away_Int`) \n \n\n  \n  #Converts vectors that are not numbers to characters\n  modifiedData[,c(1,3,11)] <- data.frame(apply(modifiedData[,c(1,3,11)], 2, as.factor))\n  modifiedData[,c(1,3,11)] <- data.frame(apply(modifiedData[,c(1,3,11)], 2, as.character))\n\n  \n  #Converts vectors that contain numbers to type double\n  numVectors = (1:ncol(modifiedData))[-c(1,2,3,11)]\n  modifiedData[,numVectors] <- data.frame(apply(modifiedData[,numVectors], 2, as.factor))\n  modifiedData[,numVectors] <- data.frame(apply(modifiedData[,numVectors], 2, as.numeric))\n  \n  \n  \n\n\n  \n  #Adjust Average Passing Yards/Attempt Stat to Net yards, not Gross yards\n  modifiedData$`Home_Pass Gain/Att` = modifiedData$`Home_Net Yards Passing`/modifiedData$`Home_Att`\n  modifiedData$`Away_Pass Gain/Att` = modifiedData$`Away_Net Yards Passing`/modifiedData$`Away_Att`\n  \n  modifiedData <- modifyWeek(modifiedData)\n  modifiedData <- modifiedData[,c(1:9,19,11:17,20,10,18)]\n  modifiedData <- modifiedData[,-c(19,20)]\n  \n  modifiedData <- modifiedData %>%\n    mutate_each_( funs(as.character(.)), names( .[,sapply(., is.factor)] ))\n\n  return(modifiedData)\n}\n```\n```{r}\ndataToGraph <- function(dataframe,week,stat){\n#Convert the season data to a graph format\n#week is the last week that you have data for i.e. use week = 7 to make predictions for week 8\n#stat is the column number of the home stat that you want to observe\n  \n  homeCol = stat\n  awayCol = stat + 8\n  \n  modifiedData <- dataframe %>%\n    filter(Week < week) %>%\n    select(Home_Team,Away_Team,homeCol,awayCol) \n  \n  home_data = modifiedData[,-c(4)]\n  colnames(home_data)[3] = 'weight'\n  away_data = modifiedData[,c(2,1,4,3)]\n  away_data = away_data[,-c(4)]\n  colnames(away_data)[3] = 'weight'\n\n  \n  h = graph.data.frame(home_data,directed = TRUE)\n  h$weight <- home_data[,3]\n  a = graph.data.frame(away_data,directed=TRUE)\n  a$weight <- away_data[,3]\n  \n  g = union(h,a)\n  \n  E(g)$weight_1[is.na(E(g)$weight_1)]<-0\n  E(g)$weight_2[is.na(E(g)$weight_2)]<-0\n  E(g)$weight <- E(g)$weight_1 +E(g)$weight_2\n  \n  g<- delete_edge_attr(g,'weight_1')\n  g<- delete_edge_attr(g,'weight_2')\n\n  \n  return(g)\n}\n```\n```{r}\ninitOffenseDefense = function(graph) {\n  num_vertices = length(V(graph))\n  offense = rep(1,num_vertices)\n  defense = rep(1,num_vertices)\n  list(offense=offense,defense=defense)\n}\n\n\n\n```\n\n```{r}\n\nupdate = function(A,o,games_ratios) {\n  (t(A) %*% (1/(games_ratios*(A %*% (1/o)))))* games_ratios \n}\n\nrun_alg = function(A,o,games_ratios,epsilon = 0.5*10^-4) {\n  diff = Inf\n  while(diff > epsilon) {\n    new_o = update(A,o,games_ratios)\n    diff = sqrt(t(new_o - o) %*% (new_o - o))\n    o = new_o\n  }\n  return(o)\n}\n\nget_games_ratios = function(g) {\n  max(degree(g))/degree(g)\n}\nget_defense = function(A,o,games_ratios) {\n  (A %*% (1/o)) * games_ratios\n}\n\n\ncalculateOD <- function(g, e = .5*10^-5){\n  #initialize offense vectors to have every team with an offensive score of 1\n  offense = rep(1,length(V(g)))\n  \n  Adj = as.matrix(get.adjacency(g,attr='weight'))\n  Adj = Adj + e*(offense %*% t(offense) - diag(length(V(g))))\n  Adj = t(Adj)\n\n  games_ratios = get_games_ratios(g)\n  \n  final_offense = run_alg(Adj, offense,games_ratios,epsilon = e)\n  final_defense = get_defense(Adj,final_offense,games_ratios)\n  \n  # offenseVect = final_offense - mean(final_offense)\n  offenseVect =final_offense / sum(final_offense)\n  offenseVect = offenseVect - mean(offenseVect)\n  # offenseVect = offenseVect[order(offenseVect,decreasing = TRUE),,drop=FALSE]\n  \n  defenseVect = 1/(final_defense) \n  defenseVect = defenseVect/sum(defenseVect)\n  defenseVect = defenseVect - mean(defenseVect)\n  # defenseVect = defenseVect[order(defenseVect,decreasing = TRUE),,drop=FALSE]\n  \n  return(list(offense = offenseVect, defense = defenseVect))\n}\n\ncreateODDF <- function(rawData){\n  data <- simplify(rawData)\n\n  teamData <- data.frame()\n  \n  #calculate OD \n  columns = c(5,7,8,10)\n  for(i in 2:max(data$Week)){\n  #Create DF based on OD for points\n    OD <- calculateOD(dataToGraph(data,i,4))\n    offense <-OD$offense\n    defense <- OD$defense\n    \n    week = rep(i,length(offense))\n    teams <- names(offense[,1])\n    \n    weeklyDF <- data.frame(week,teams,offense,defense)\n\n    for(j in columns){\n    #Expand this DF to include OD for other stats\n      OD <- calculateOD(dataToGraph(data,i,j))\n      offense <-OD$offense\n      defense <- OD$defense\n      \n      week = rep(i,length(offense))\n      teams <- names(offense[,1])\n      w <- data.frame(week,teams,offense,defense)\n      \n      weeklyDF <- weeklyDF %>%\n        left_join(w,by= c(\"week\"=\"week\",\"teams\" = \"teams\"))\n    }\n    \n    teamData <- teamData %>%\n      bind_rows(weeklyDF)\n  }\n  \n  colnames(teamData) <- c(\"Week\",'Team',\"O_Points\",\"D_Points\",\"O_Net Rush\",\"D_Net Rush\",\"O_Avg Rush\",\"D_Avg Rush\",\"O_Net Pass\",'D_Net Pass','O_Avg Pass','D_Avg Pass')\n  \n  return(teamData)\n}\n\n\n# OD_2016 <-createODDF(game_stats_2016)\n# View(OD_2016)\n```\n```{r}\n# g = dataToGraph(data_2016,23,6)\n# Adj = as.matrix(get.adjacency(g,attr='weight'))\n```\n\n\n\n```{r}\ncreateOffensiveData <- function(gameData){\n  \n  homeData = gameData[,c(1:10)]\n  awayData = gameData[,c(1:2,11:18)]\n  \n  home_names = c(colnames(homeData)[1:2],unlist(strsplit(colnames(homeData[3:length(colnames(homeData))]), split='_', fixed=TRUE))[seq(2,16,by=2)])\n  colnames(homeData) = home_names\n  colnames(awayData) = home_names\n  \n  modifiedData = bind_rows(awayData,homeData)\n  \n  modifiedData <- modifiedData %>%\n    group_by(Team) %>%\n    arrange(Team,Week) %>%\n    mutate(`cumavg rush` = cummean(`Avg Rush Gain`)) %>%\n    mutate(`cumavg pass` = cummean(`Pass Gain/Att`)) %>%\n    mutate(`cumavg total rush` = cummean(`Net Yards Rushing`)) %>%\n    mutate(`cumavg total pass` = cummean(`Net Yards Passing`)) %>%\n    mutate('Next Week' = `Week`+1 )\n  \n  modifiedData <- modifiedData[,-c(4:10)]\n  modifiedData <- modifiedData[,c(8,3:7,1:2)]\n  modifiedData <-modifiedData[,-c(7:8)]\n  \n  colnames(modifiedData)[3:6] = paste0(\"Offense \", colnames(modifiedData)[3:6])\n  \n  \n  \n  #Missing infrormation for after the team's bye week\n  for(i in 2:nrow(modifiedData))\n    if(modifiedData$`Next Week`[i-1] + 2 == modifiedData$`Next Week`[i]){\n      newRow = modifiedData[i-1,]\n      newRow$`Next Week` = modifiedData[i-1,]$`Next Week` +1\n      \n      modifiedData <- bind_rows(modifiedData,newRow)\n    }\n  \n  modifiedData <- modifiedData %>% \n    arrange(Team,`Next Week`)\n\n  \n  \n  return(modifiedData)\n}\n```\n```{r}\ncreateDefensiveData <- function(gameData){\n  homeData = gameData[,c(1:3,12:18)]\n  awayData = gameData[,c(1:2,11,4:10)]\n  \n  home_names = c(colnames(homeData)[1:2],unlist(strsplit(colnames(homeData[3:length(colnames(homeData))]), split='_', fixed=TRUE))[seq(2,16,by=2)])\n  colnames(homeData) = home_names\n  colnames(awayData) = home_names\n\n  modifiedData = bind_rows(awayData,homeData)\n\n  modifiedData <- modifiedData %>%\n    group_by(Team) %>%\n    arrange(Team,Week) %>%\n    mutate(`cumavg rush` = cummean(`Avg Rush Gain`)) %>%\n    mutate(`cumavg pass` = cummean(`Pass Gain/Att`)) %>%\n    mutate(`cumavg total rush` = cummean(`Net Yards Rushing`)) %>%\n    mutate(`cumavg total pass` = cummean(`Net Yards Passing`)) %>%\n    mutate('Next Week' = `Week`+1 )\n\n  modifiedData <- modifiedData[,-c(4:10)]\n  modifiedData <- modifiedData[,c(8,3:7,1:2)]\n  modifiedData <-modifiedData[,-c(7:8)]\n  \n  colnames(modifiedData)[3:6] = paste0(\"Defense \", colnames(modifiedData)[3:6])\n\n\n\n  #Missing infrormation for after the team's bye week\n  for(i in 2:nrow(modifiedData))\n    if(modifiedData$`Next Week`[i-1] + 2 == modifiedData$`Next Week`[i]){\n      newRow = modifiedData[i-1,]\n      newRow$`Next Week` = modifiedData[i-1,]$`Next Week` +1\n\n      modifiedData <- bind_rows(modifiedData,newRow)\n    }\n\n  modifiedData <- modifiedData %>%\n    arrange(Team,`Next Week`)\n\n  \n  \n  return(modifiedData)\n}\n\ncreateTeamData <- function(gameData){\n  defenseData <- createDefensiveData(gameData)\n  offenseData <- createOffensiveData(gameData)\n  \n  teamData <- offenseData %>%\n    left_join(defenseData, by= c(\"Next Week\"=\"Next Week\",\"Team\" = \"Team\"))\n  \n  return(teamData)\n\n\n}\n\n```\n\n\n```{r}\ncreateModelDF <- function(rawDataframe, prevYearRawDataframe){\n  game_data <- simplify(rawDataframe)\n  \n\n  \n  OD_dataframe <- createODDF(rawDataframe) %>%\n      select(Week,Team,contains(\"O_\"),contains(\"D_\"))\n  \n  prev_OD_dataframe <- createODDF(prevYearRawDataframe) %>%\n    select(Week,Team,contains(\"Points\")) %>%\n    filter(Week>20) %>%\n    rename(`O_Points_Last_Year` = O_Points) %>%\n    rename(`D_Points_Last_Year` = D_Points) %>%\n    select(-Week)    \n\n  \n  \n  OD_dataframe$Team = as.character(OD_dataframe$Team)\n  prev_OD_dataframe$Team = as.character(prev_OD_dataframe$Team)\n  \n  #Account for team name changes\n  oldTeam = \"St. Louis\"\n  newTeam = \"Los Angeles\"\n\n  game_data[ game_data == oldTeam ] <- newTeam\n  OD_dataframe[OD_dataframe==oldTeam]<- newTeam\n  prev_OD_dataframe[prev_OD_dataframe==oldTeam]<-newTeam\n  \n  \n  \n  game_id = data.frame(1:nrow(game_data))\n  \n  team_names <- game_data %>%\n    group_by(Home_Team) %>%\n    summarise() \n  \n  colnames(team_names)<- \"Team\"\n  \n  team_id = data.frame(1:nrow(team_names))\n  \n  team_ids <- bind_cols(team_names,team_id)\n  home_ids <- team_ids \n  colnames(home_ids)[2] = \"Home_id\"\n  away_ids <- team_ids\n  colnames(away_ids)[2] = \"Away_id\"\n  game_data <- game_data %>%\n    left_join(home_ids,by = c(\"Home_Team\" = \"Team\")) %>%\n    left_join(away_ids,by = c(\"Away_Team\"= \"Team\")) %>% \n    select(Date,Week,Home_Team,Home_id,Home_Points,Away_Team,Away_id,Away_Points)\n  \n\n  \n\n  \n  \n  H_data <- OD_dataframe \n  A_data <- OD_dataframe\n  \n  H_prev <- prev_OD_dataframe\n  A_prev <- prev_OD_dataframe\n  \n  colnames(H_data)[1:ncol(H_data)] <- paste0(\"Home_\",colnames(H_data)[1:ncol(H_data)])\n  colnames(A_data)[1:ncol(A_data)] <- paste0(\"Away_\",colnames(A_data)[1:ncol(A_data)])\n  \n  colnames(H_prev)[1:ncol(H_prev)] <- paste0(\"Home_\",colnames(H_prev)[1:ncol(H_prev)])\n  colnames(A_prev)[1:ncol(A_prev)] <- paste0(\"Away_\",colnames(A_prev)[1:ncol(A_prev)])\n  \n  \n  game_data <- game_data %>%\n    bind_cols(game_id) %>%\n    left_join(H_data,by = c(\"Week\" = \"Home_Week\", \"Home_Team\"=\"Home_Team\")) %>%\n    left_join(H_prev,by = c(\"Home_Team\"=\"Home_Team\")) %>%\n    left_join(A_data,by = c(\"Week\" = \"Away_Week\", \"Away_Team\"=\"Away_Team\")) %>%\n    left_join(A_prev,by = c(\"Away_Team\"=\"Away_Team\")) %>%\n    select(Date,Week,contains(\"Home_\"),contains(\"Away_\")) %>%\n    filter(Week >3) %>%\n    arrange(Week,Home_Team)\n  \n  binnedWeeks <- rep(0, nrow(game_data))\n  weeks <- game_data$Week\n  # for(i in 1:length(weeks)){\n  #   if(weeks[i]>=1 & weeks[i]<=5){\n  #     binnedWeeks[i]=1\n  #   } else if(weeks[i]>=6 & weeks[i]<=10){\n  #     binnedWeeks[i] = 2\n  #   } else if(weeks[i]>=11 & weeks[i] <=14){\n  #     binnedWeeks[i] = 3\n  #   } else{\n  #     binnedWeeks[i] = 4\n  #   }\n  # }\n  \n  for(i in 1:length(weeks)){\n    if(weeks[i]>=1 & weeks[i]<=5){\n      binnedWeeks[i] = 1\n    } else if(weeks[i]>=5 & weeks[i] <=10){\n      binnedWeeks[i] = 2\n    } else{\n      binnedWeeks[i] = 3\n    }\n  }\n  binnedWeeks <-data.frame(binnedWeeks)\n  colnames(binnedWeeks)<- \"binnedWeeks\"\n  \n  game_data <- bind_cols(game_data,binnedWeeks)\n  \n  return(game_data)\n}\n\n\n# View(createModelDF(game_stats_2016,game_stats_2015))\n# View(createModelDF(game_stats_2015,game_stats_2014))\n\n\n```\n\n\n\n\nwrite.csv(modelDF2016,\"modelData2016.csv\")\n\n\n```{r}\n# data_2014 <-simplify(game_stats_2016)\n# data_2015 <-simplify(game_stats_2016)\n# data_2016 <-simplify(game_stats_2016)\n# data_2017 <-simplify(game_stats_2016)\n\n modelDF2011 <- createModelDF(game_stats_2011,game_stats_2010)\n modelDF2012 <- createModelDF(game_stats_2012,game_stats_2011)\n modelDF2013 <- createModelDF(game_stats_2013,game_stats_2012)\n modelDF2014 <- createModelDF(game_stats_2014,game_stats_2013)\n modelDF2015 <- createModelDF(game_stats_2015,game_stats_2014)\n modelDF2016 <- createModelDF(game_stats_2016,game_stats_2015)\n# modelDF2017 <- createModelDF(game_stats_2017,game_stats_2016)\n```\n\n```{r} \n#Data filtered to later weeks to avoid noise\n\nmodelData <-modelDF2015 %>% \n  bind_rows(modelDF2014) %>%\n  bind_rows(modelDF2013) %>%\n  bind_rows(modelDF2012) %>%\n  bind_rows(modelDF2011)\n\n```\n\n\n\n```{r}\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(lubridate)\nlibrary(readr)\nlibrary(igraph)\nlibrary(rjags)\n\n```\n```{r}\nscore_diff <- \"model{\n  #Data\n  for(i in 1:length(H_pts)) {\n    H_pts[i] ~ dpois(H_lam[i])\n    A_pts[i] ~ dpois(A_lam[i])\n  \n    log(H_lam[i]) <- b0+ h0 + b1*(h_O[i] - a_D[i])\n    log(A_lam[i]) <- b0 + b1*(a_O[i] - h_D[i]) \n  }\n  \n  #Priors\n  h0 ~ dnorm(0,1/10)\n\n  b0 ~ dnorm(0,1/10)\n  b1 ~ dnorm(1,1/10)\n  b2 ~ dnorm(1,1/10)\n}\"\n\nscore_diff_jags <- jags.model(textConnection(score_diff),\n                              \ndata= list(H_pts = modelData$Home_Points, A_pts = modelData$Away_Points, h_D= modelData$Home_D_Points , h_O= modelData$Home_O_Points , a_D= modelData$Away_D_Points , a_O= modelData$Away_O_Points),\n\ninits=list(.RNG.name=\"base::Wichmann-Hill\", .RNG.seed=1989))\n\nscore_diff_sim <- coda.samples(score_diff_jags, variable.names=c(\"h0\",\"b0\",\"b1\"), n.iter=10000)\n   \nscore_diff_sample <- data.frame(step=1:10000, score_diff_sim[[1]])\nhead(score_diff_sample)\n```\n```{r}\nsummary(score_diff_sim)\nplot(score_diff_sim)\n```\n\n```{r}\nset.seed(13)\n\npredictScoreDiff <- function(modelDFRow){\n  predictions = \n    rpois(10000,exp(score_diff_sample$h0 + score_diff_sample$b0 + score_diff_sample$b1*(modelDFRow$Home_O_Points - modelDFRow$Away_D_Points))) - \n    rpois(10000, exp(score_diff_sample$b0 + score_diff_sample$b1*(modelDFRow$Away_O_Points - modelDFRow$Home_D_Points)))\n\n}\n\ncomparePrediction <- function(modelDF){\n  accuracyVect = rep(0,nrow(modelDF))\n  for(i in 1:nrow(modelDF)){\n    scoreDiff = modelDF$Home_Points[i] - modelDF$Away_Points[i]\n    predictionsDF = data.frame(predictScoreDiff(modelDF[i,])) \n    meanPredictions = round(mean(predictionsDF[,1]))\n    accuracyVect[i] = round(scoreDiff - meanPredictions)\n  }\n  accuracyDF = data.frame(accuracyVect,abs(accuracyVect))\n  colnames(accuracyDF)<- c(\"Prediction Accuracy\",\"Error\")\n  return(accuracyDF)\n}\n\n```\n\n```{r}\nset.seed(13)\npredictions2016 = comparePrediction(modelDF2016)\n# View(predictions2016)\n\nmean(predictions2016$`Prediction Accuracy`)\nmean(predictions2016$Error)\nggplot(predictions2016, aes(x=`Prediction Accuracy`)) + geom_histogram(binwidth = 3, aes(y=..density..))\nggplot(predictions2016, aes(x=`Error`)) + geom_histogram(binwidth = 3, aes(y=..density..))\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n```{r}\nfinal <- \"model{\n  #Data\n  for(i in 1:length(H_pts)) {\n    H_pts[i] ~ dpois(H_lam[i])\n    A_pts[i] ~ dpois(A_lam[i])\n  \n    log(H_lam[i]) <- b0 + h0 + b1*(h_O[i] - a_D[i]) + b2*(hprior_O[i] - aprior_D[i]) \n    log(A_lam[i]) <- b0 + b1*(a_O[i] -h_D[i]) + b2*(aprior_O[i] - hprior_D[i]) \n  }\n\n\n  #Priors\n  b0 ~ dnorm(0,1/10)\n  h0 ~ dnorm(0,1/10)\n\n  b1 ~ dnorm(1,1/10)\n  b2 ~ dnorm(1,1/10)\n\n\n}\"\n\nfinal_jags <- jags.model(textConnection(final),\n                              \ndata= list(H_pts = modelData$Home_Points, A_pts = modelData$Away_Points,h_D= modelData$Home_D_Points , h_O= modelData$Home_O_Points , a_D= modelData$Away_D_Points , a_O= modelData$Away_O_Points,hprior_O = modelData$Home_O_Points_Last_Year,hprior_D = modelData$Home_D_Points_Last_Year,aprior_O = modelData$Away_O_Points_Last_Year,aprior_D = modelData$Away_D_Points_Last_Year),\n\ninits=list(.RNG.name=\"base::Wichmann-Hill\", .RNG.seed=1989))\n\nfinal_sim <- coda.samples(final_jags, variable.names=c(\"h0\",\"b0\",\"b1\",\"b2\"), n.iter=10000)\n   \nfinal_sample <- data.frame(step=1:10000, final_sim[[1]])\nhead(final_sample)\n```\n```{r}\nsummary(final_sim)\nplot(final_sim)\n```\n```{r}\nset.seed(13)\nsingle_prediction <- function(modelDFRow, predictionsDF){\n  home_pred = rpois(10000,exp(predictionsDF$h0 + predictionsDF$b0 + predictionsDF$b1*(modelDFRow$`Home_O_Points` - modelDFRow$`Away_D_Points`) + predictionsDF$b2*(modelDFRow$`Home_O_Points_Last_Year` - modelDFRow$`Away_D_Points_Last_Year`)))\n  \n  away_pred = rpois(10000,exp(predictionsDF$b0 + predictionsDF$b1*(modelDFRow$`Away_O_Points` - modelDFRow$`Home_D_Points`) + predictionsDF$b2*(modelDFRow$`Away_O_Points_Last_Year` - modelDFRow$`Home_D_Points_Last_Year`)))\n  \n  return(list(score_diff = home_pred - away_pred, total_pts = home_pred + away_pred))           \n}\n\nall_predictions <- function(data, sampleDF){\n  score_diff_predictions = rep(0,nrow(data))\n  total_points_predictions = rep(0,nrow(data))\n  for(i in 1:nrow(data)){\n    prediction = single_prediction(data[i,],sampleDF)\n    score_diff_predictions[i] = round(mean(prediction$score_diff))\n    total_points_predictions[i] = round(mean(prediction$total_pts))\n  }\n  predictionsDF = data.frame(score_diff_predictions,total_points_predictions)\n\n  newDF = bind_cols(data,predictionsDF)\n  return(newDF)\n}\n```\n\n```{r}\nset.seed(13)\npredictions2016 = all_predictions(modelDF2016,final_sample)\n# View(predictions2016)\n\n\n\npredictions2016 <- predict2016 %>%\n  mutate(score_diff = Home_Points - Away_Points) %>%\n  mutate(score_accuracy = score_diff_predictions - score_diff) %>%\n  mutate(score_error = abs(score_accuracy)) %>%\n  mutate(total_pts = Home_Points + Away_Points) %>%\n  mutate(total_pts_accuracy = total_points_predictions - total_pts) %>%\n  mutate(total_error = abs(total_pts_accuracy)) %>%\n  select(Date,Week,Home_Team,Home_Points,Away_Team,Away_Points,contains('score'),contains('total'))\n\nmean(predictions2016$`score_accuracy`)\nmean(predictions2016$score_error)\nggplot(predictions2016, aes(x=`score_accuracy`)) + geom_histogram(binwidth = 3, aes(y=..density..))\nggplot(predictions2016, aes(x=`score_error`)) + geom_histogram(binwidth = 3, aes(y=..density..))\n\n```\n\n\n```{r}\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(lubridate)\nlibrary(readr)\nlibrary(igraph)\nlibrary(rjags)\n\n```\n\n\n```{r} \n#Data filtered to later weeks to avoid noise\n\nmodelData <-modelDF2015 %>% \n  bind_rows(modelDF2014) %>%\n  bind_rows(modelDF2013) %>%\n  bind_rows(modelDF2012) %>%\n  bind_rows(modelDF2011)\n\n\nmodelDF2016 <- filter(modelDF2016,Week>3)\n```\n\nGoal:\nCreate a model that predicts the score differential in a game\n\n```{r}\nfinal <- \"model{\n  #Data\n  for(i in 1:length(H_pts)) {\n    H_pts[i] ~ dpois(H_lam[i])\n    A_pts[i] ~ dpois(A_lam[i])\n  \n    log(H_lam[i]) <- b0 + h0 + b1[w[i]]*(h_O[i] - a_D[i]) + b2[w[i]]*(hprior_O[i] - aprior_D[i]) \n    log(A_lam[i]) <- b0 + b1[w[i]]*(a_O[i] -h_D[i]) + b2[w[i]]*(aprior_O[i] - hprior_D[i]) \n  }\n\n  #Modify the weighting on the relationship between current stats and the priors over time.\n  for(t in 1:3){\n    b1[t] ~ dnorm(1,1/10)\n    b2[t] ~ dnorm(1,1/10)\n\n  }\n\n\n  #Priors\n\n  b0 ~ dnorm(0,1/10)\n  h0 ~ dnorm(0,1/10)\n\n\n}\"\n\nfinal_jags <- jags.model(textConnection(final),\n                              \ndata= list(H_pts = modelData$Home_Points, A_pts = modelData$Away_Points,h_D= modelData$Home_D_Points , h_O= modelData$Home_O_Points , a_D= modelData$Away_D_Points , a_O= modelData$Away_O_Points,hprior_O = modelData$Home_O_Points_Last_Year,hprior_D = modelData$Home_D_Points_Last_Year,aprior_O = modelData$Away_O_Points_Last_Year,aprior_D = modelData$Away_D_Points_Last_Year, w = modelData$binnedWeeks),\n\ninits=list(.RNG.name=\"base::Wichmann-Hill\", .RNG.seed=1989))\n\nfinal_sim <- coda.samples(final_jags, variable.names=c(\"h0\",\"b0\",\"b1\",\"b2\"), n.iter=10000)\n```\n \n```{r}\nfinal_sample <- data.frame(step=1:10000, final_sim[[1]])\nhead(final_sample)\n```\n```{r}\nsummary(final_sim)\nplot(final_sim)\n```\n```{r}\nset.seed(13)\nsingle_prediction <- function(modelDFRow, predictionsDF){\n  home_pred = rpois(10000,exp(predictionsDF$h0 + predictionsDF$b0 + predictionsDF[,modelDFRow$binnedWeek + 2]*(modelDFRow$`Home_O_Points` - modelDFRow$`Away_D_Points`) + predictionsDF[,modelDFRow$binnedWeek + 5]*(modelDFRow$`Home_O_Points_Last_Year` - modelDFRow$`Away_D_Points_Last_Year`)))\n  \n  away_pred = rpois(10000,exp(predictionsDF$b0 + predictionsDF[,modelDFRow$binnedWeek + 2]*(modelDFRow$`Away_O_Points` - modelDFRow$`Home_D_Points`) + predictionsDF[,modelDFRow$binnedWeek + 5]*(modelDFRow$`Away_O_Points_Last_Year` - modelDFRow$`Home_D_Points_Last_Year`)))\n  \n  return(list(score_diff = home_pred - away_pred, total_pts = home_pred + away_pred))           \n}\n\nall_predictions <- function(data, sampleDF){\n  score_diff_predictions = rep(0,nrow(data))\n  total_points_predictions = rep(0,nrow(data))\n  for(i in 1:nrow(data)){\n    prediction = single_prediction(data[i,],sampleDF)\n    score_diff_predictions[i] = round(mean(prediction$score_diff))\n    total_points_predictions[i] = round(mean(prediction$total_pts))\n  }\n  predictionsDF = data.frame(score_diff_predictions,total_points_predictions)\n\n  newDF = bind_cols(data,predictionsDF)\n  return(newDF)\n}\n```\n\n\n\n\n```{r}\npredict2016 = all_predictions(modelDF2016, final_sample)\n\npredict2016 <- predict2016 %>%\n  mutate(score_diff = Home_Points - Away_Points) %>%\n  mutate(score_accuracy = score_diff_predictions - score_diff) %>%\n  mutate(score_error = abs(score_accuracy)) %>%\n  mutate(total_pts = Home_Points + Away_Points) %>%\n  mutate(total_pts_accuracy = total_points_predictions - total_pts) %>%\n  mutate(total_error = abs(total_pts_accuracy)) %>%\n  select(Date,Week,Home_Team,Home_Points,Away_Team,Away_Points,contains('score'),contains('total'))\n  \n\n\nonlyTeam <- function(dataframe,Team){\n  onlyTeamData <- dataframe %>%\n    subset(Home_Team == Team | Away_Team == Team)\n  return(onlyTeamData)\n}\n\nteamPredictions <- function(dataframe,team){\n  \n  teamData <- onlyTeam(dataframe, team)\n  \n  teamHome <- teamData %>%\n    subset(Home_Team == team) %>%\n    select(Week,Home_Team,7:10) %>%\n    rename(Team = Home_Team) %>%\n    mutate(team_score_diff_predictions = score_diff_predictions) %>%\n    mutate(team_score_diff = score_diff) %>%\n    mutate(team_score_accuracy = score_accuracy) %>%\n    select(Week,Team,contains(\"team\"),score_error)\n\n  teamAway <- teamData %>%\n    subset(Away_Team == team) %>%\n    select(Week,Away_Team,7:10) %>%\n    rename(Team = Away_Team) %>%\n    mutate(team_score_diff_predictions = -1*score_diff_predictions) %>%\n    mutate(team_score_diff = -1*score_diff) %>%\n    mutate(team_score_accuracy = -1*score_accuracy) %>%\n    select(Week,Team,contains(\"team\"),score_error)\n  \n  finalTeamData <- bind_rows(teamAway,teamHome) %>%\n    select(Week,Team,contains(\"score_diff\"),-contains('accuracy')) %>%\n    arrange(Week) %>%\n    gather(Result, `Point Differential`,-Week,-Team)\n  \n  return(finalTeamData)\n}\n\n```\n\n# View(predict2016)\n\n```{r}\n\n\n# mean(predict2016$`score_accuracy`)\nggplot(predict2016, aes(x=`score_accuracy`)) + geom_histogram(binwidth = 3, aes(y=..density..))\nggplot(predict2016, aes(x=`total_pts_accuracy`)) + geom_histogram(binwidth = 3, aes(y=..density..))\n\nggplot(predict2016, aes(x=`score_error`)) + geom_histogram(binwidth = 3, aes(y=..density..))\nggplot(predict2016, aes(x=`total_error`)) + geom_histogram(binwidth = 3, aes(y=..density..))\n\nmean(predict2016$score_error)\nmean(predict2016$total_error)\n\nmean(predict2016$score_accuracy)\nmean(predict2016$total_pts_accuracy)\n\n```\n\n```{r}\ndenver = teamPredictions(predict2016,\"Denver\")\nnewEngland = teamPredictions(predict2016,\"New England\")\nlosAngeles = teamPredictions(predict2016,\"Los Angeles\")\ncarolina = teamPredictions(predict2016,\"Carolina\")\nchicago = teamPredictions(predict2016,\"Chicago\")\ngreenBay = teamPredictions(predict2016,\"Green Bay\")\nnewOrleans = teamPredictions(predict2016,\"New Orleans\")\ntennessee =  teamPredictions(predict2016,\"Tennessee\")\noakland = teamPredictions(predict2016,\"Oakland\")\nminnesota = teamPredictions(predict2016,\"Minnesota\")\ncleveland = teamPredictions(predict2016,\"Cleveland\")\n\n\n\n\n\n\n\n\n\nggplot(denver, aes(x= Week,y = `Point Differential`,color = Result)) +\n    geom_line() + geom_point() + ggtitle(\"Denver\")\n\nggplot(newEngland, aes(x= Week,y = `Point Differential`,color = Result)) +\n    geom_line() + geom_point()+ ggtitle(\"New England\")\n\nggplot(losAngeles, aes(x= Week,y = `Point Differential`,color = Result)) +\n    geom_line() + geom_point()+ ggtitle(\"Los Angeles\")\n\nggplot(carolina, aes(x= Week,y = `Point Differential`,color = Result)) +\n    geom_line() + geom_point()+ ggtitle(\"Carolina\")\n\nggplot(chicago, aes(x= Week,y = `Point Differential`,color = Result)) +\n    geom_line() + geom_point()+ ggtitle(\"Chicago\")\n\nggplot(greenBay, aes(x= Week,y = `Point Differential`,color = Result)) +\n    geom_line() + geom_point()+ ggtitle(\"Green Bay\")\n\nggplot(newOrleans, aes(x= Week,y = `Point Differential`,color = Result)) +\n    geom_line() + geom_point()+ ggtitle(\"New Orleans\")\n\nggplot(tennessee, aes(x= Week,y = `Point Differential`,color = Result)) +\n    geom_line() + geom_point()+ ggtitle(\"Tennessee\")\n\nggplot(oakland, aes(x= Week,y = `Point Differential`,color = Result)) +\n    geom_line() + geom_point()+ ggtitle(\"Oakland\")\n\nggplot(minnesota, aes(x= Week,y = `Point Differential`,color = Result)) +\n    geom_line() + geom_point()+ ggtitle(\"Minnesota\")\n\nggplot(cleveland, aes(x= Week,y = `Point Differential`,color = Result)) +\n    geom_line() + geom_point()+ ggtitle(\"Cleveland\")\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1513527242818.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1912150352",
    "id" : "F4506B68",
    "lastKnownWriteTime" : 1513534556,
    "last_content_update" : 1513534556160,
    "path" : "/home/local/MAC/bgraham/BayesStats_Project/CleanCode.Rmd",
    "project_path" : "CleanCode.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}