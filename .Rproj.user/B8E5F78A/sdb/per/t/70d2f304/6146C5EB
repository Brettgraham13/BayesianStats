{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Predicting NFL Games with Bayesian Statistics\"\nsubtitle: \"BayesianBloggers\"\nauthor: \"Gunnar Goeden & Brett Graham\"\ndate: \"`r Sys.Date()`\"\noutput:\n  tufte::tufte_html: default\n  tufte::tufte_handout:\n    citation_package: natbib\n    latex_engine: xelatex\n  tufte::tufte_book:\n    citation_package: natbib\n    latex_engine: xelatex\nbibliography: skeleton.bib\nlink-citations: yes\n---\n\n```{r setup, include=FALSE}\nlibrary(tufte)\n# invalidate cache when the tufte version changes\nknitr::opts_chunk$set(tidy = FALSE, cache.extra = packageVersion('tufte'))\noptions(htmltools.dir.version = FALSE)\n```\n\n\n#Introduction/Motivation\nAmerican Football is a dynamic sport, anything can happen. At any moment, there are 22 players on the field playing different positions to reach one of thousands of objectives, and millions of results may be attained. Beyond all of this variety, it is one of America's favorite sports to watch and to try and predict. Predicting football outcomes is no easy task, but we were excited about the challenge and decided to try our hand at it. We took particular interest in attempting to model the score differential of NFL games, using distinct team offensive and defensive score stats that we calculated. We were specifically interested in seeing if these summary score statistics would act as effective predictors. Choosing to do a project like this was easy, because we are both big fans of the sport. If you wanted to see how we did, or to hear more about our methods, models, and findings, read on!\n\n\nThe literature that guided our work for the creation of the models was an article from the journal of Applied Statistics titled *Bayesian hierarchical model for the prediction of football results* by Gianluca Baio and Marta Blangiardo. This article was our primary building block for our model structure. Athough Baio and Blangiardo modeled regular football (soccer) scores, many of their ideas were transferable with a few modifications. They used a model called a Poisson log-normal, where the score $y_{jg}|\\theta_{jg}$ was distributed based on a rate for each teams scoring ability $\\theta_i$ in each of the two times they played $g$. These rates are then logged equations of similar offensive and defensive ability scores, each of which are normally distributed. They found their score predictions to be fairly accurate for the football clubs analyzed.\n\n# Methods\nInitially, we had to look at whether we wanted to work with team or individual stats. Given that individual stats were much more difficult to find and would include some obsolete info for non-skill players, we chose to work with team statistics. This created a contextualization problem of relating team stats to points scored. The solution came in the OD (offensive defensive) score model. The way this model works, is the offensive score of a team over a season is the sum of the ratio between all the points they score, and the points they allowed to be scored on them in each game. This set up helps to balance out an overweighted score from scoring a lot against a team that typically gives up a lot of points. The defensive scores are calculated the same way, as seen below. \n$$\no_{i,t} = \\frac{s_{i,1}}{d_{1,t-1}} + \\frac{s_{i,2}}{d_{2,t-1}} + \\dots + \\frac{s_{i,n}}{d_{n,t-1}} \\\\\nd_{i,t} = \\frac{s_{i,1}}{o_{1,t}} + \\frac{s_{i,2}}{o_{n,t}} + \\dots + \\frac{s_{i,n}}{o_{n,t}} \\\\\n\\text{These scores can be updated with each new additional game as they hold the relationship} \\\\\no_t = A (1/d_{t-1}) \\\\\nd_t = A (1/o_t) \\\\\n$$\n\n\n# The Data\nA significant portion of this project was trying to get the data we want, in a way in which it was useful to use. It all started with scraping sections of two web pages from The Football Data Base website (www.footballdb.com). We scraped the data with R using the (xm12) package and the (rvest) packages. We used a google chrome extention called selector gadget to highlight the CSS code. In order to obtain game data beyond the boxscores, we found a pattern listed in the url of these pages that was organized by date and game number. From there we were able to loop in and go through and scrape those pages efficiently. We created a vector for the home and away data, and then compiled all the information into a dataframe. This worked effectively for every year except 2017, while the method should work with incomplete seasons, footballdb had some errors in their url date code that led us to Canadian football on one occasion. Thus, this project will not include 2017 data, but will include data from 2011 to 2016. All of this code was made in a function format so that we could input what year of data and we would recieve that year. R packages (dplyr) (tidyr) and (lubridate) were all necessary for acquiring the data. Table 1 below shows the first few columns of our raw data.\n\nThe second step of this process was Data wrangling. We needed to take the raw statistics scraped from the site, and transform them into the data we wanted to use. This was an extensive step that came in two shifts. The first was to make sure all the data was usable and that our data set only included variable statistics that we wanted. This included changing numeric stats to numeric values, breaking completion/attempts stats into attempts and completions separately, and obtaining correct week numbers including post season games, to name a few. The second shift was the formation of our Offensive and Defensive score statistics from the cleaned data. This was a detailed task that included mapping each team's offensive stats to the identified offensive team, and all defensive stats to the identified defensive team.\n\n##Table 1: Raw Data \n![](photos/rawdata.png)\n\n\n#Models & Results\nAfter we had aquired and modified the data to our likeing, we began to construct some models that would best predict the score differential of an NFL game using rstudio's (rjags) package. Our models took on a Baysian approach, where we took prior understanding of some of our parameters to try and predict what the output may be, and adjusted that understanding with each new addition of data to the model. Our most basic model structure is similar to the literature by Baio and Blangiardo, we chose a Poisson model so that we can take a rate of points scored in a game, and record a count of points from it. However for Poisson models, the $E(\\lambda)=Var(\\lambda)$ and this does not reflect results that are accurate in variance. To solve this, we logged the $\\lambda$ equation. Additionally, each of our models was trained on data from the 2011 to 2015 NFL seasons, before being tested on the 2016 season. For reference, Tables 2 and 3 below will provide a brief summary for each variable and parameter used in our models.\n\n##Table 2: Variable Values   \nVariable                  |  Definition\n------------------------  |  ----------------------------------------------\n$y_{hi}$                  |  Home team final points scored in game i \n$y_{ai}$                  |  Away team final points scored in game i\n$w_i$                     |  Binned weeks dividing each season into 3 uneven sections (early, mid, and late season\n$hO_i$                    |  Home team's offensive score stat in game i\n$hD_i$                    |  Home team's defensive score stat in game i\n$aO_i$                    |  Away team's offensive score stat in game i\n$aD_i$                    |  Away team's defensive score stat in game i\n$hO_{i(y-1)}$             |  Home team's offensive score stat from last year\n$hD_{i(y-1)}$             |  Home team's defensive score stat from last year\n$aO_{i(y-1)}$             |  Away team's offensive score stat from last year\n$aD_{i(y-1)}$             |  Away team's defensive score stat from last year\n\n##Table 3: Perameters         \nParameter            |  Definition\n-------------------- |  ---------------------------------------------------------------------\n$h\\lambda_i$         |  The rate at which the home team scores points in a game i\n$a\\lambda_i$         |  The rate at which the away team scores points in a game i\n$\\beta_{1t}$         |  The weighting coefficient used to represent the relationship between the rate of points scored in game i                         and the difference of the offensive team score and the defensive team score. Weighted in higher models\n$\\beta_{2t}$         |  The weighting coefficient used to represent the relationship between the rate of points scored in game i                         and the difference of the home team's previous year offensive team score and the away team's previous                           year defensive team score. Weighted in higher models. \n$\\beta_0$            |  The parameter which lists the logged y-intercept, or a base rate which points are scored if all                                 variables =0\n$h_0$                |  The parameter which implements a home field advantage\n\n\n\n##Model 1\nStarting with this Bayesian structure, we came up with our first model:\n$$\ny_{hit}|h\\lambda_{it},\\beta_0,\\beta_1,\\beta_2,h_0 \\sim Pois(h\\lambda_{i}) \\\\\ny_{ait}|a\\lambda_{it},\\beta_0,\\beta_1,\\beta_2 \\sim Pois(a\\lambda_i) \\\\\nlog(h\\lambda_{it}) = \\beta_0 + h_0 + \\beta_{1}(hO_{it} - aD_{it}) \\\\\nlog(a\\lambda_{it}) = \\beta_0  + \\beta_{1}(aO_{it} - hD_{it})  \\\\\n\\beta_0,h_0 \\sim N(0,10) \\\\\n\\beta_{1} \\sim N(1,10)  \\\\\n$$\nThis model implies our basic model principles and looks at the logged rates $h\\lambda$ and $a\\lambda$ where they are being determined based on the difference of home and away team's offensive and defensive scores. Additionally, the coefficients $\\beta0,\\beta1, \\text{and}\\; h0$ all have very basic normally distributed priors, which allow for a greater majority of our understanding to come from the data we recieve. This model is considered our basic model because it only looks at a team's production over the course of the season, there is not much else accounted for as far as how good were they last year, or how they have improved or faltered since the begining of the season.\n\nThe results of our first model in Table 4 show how all of our parameters are in fact positvely correlated, but none of them look to hold any significance. When comparing our predictions to the actual outcomes of the games, we notice that our average prediction error was 10.10 points. As can be seen in Figures 1 and 2, wich show the spread of our predictions and the distribution of the prediction error, there are still a few games we missed by as much as 20 or even 40 on occasion. We looked to clean this up a bit in our next model.\n\n\n##Table 4: Model One Summary Stats\n\n               2.5%       25%        50%       75%        97.5%\n----------- ---------- ---------- ---------- ---------- ----------\n $\\beta_0$     3.05       3.06      3.06       3.07       3.08   \n $\\beta_1$     1.35       1.50      1.58       1.65       1.80 \n $h_0$         0.10       0.11      0.12       0.12       0.013\n \n##Figure 1\n![](photos/model1predac.png)\n\n##Figure 2\n![](photos/model1err.png)\n\n\n##Model 2\nIn our second model, we added two new $\\beta_2$ parameters as well as pieces to our equation that would account for the team's performance incorporating last years OD score stats.\n$$\ny_{hit}|h\\lambda_{it},\\beta_0,\\beta_1,\\beta_2,h_0 \\sim Pois(h\\lambda_{i}) \\\\\ny_{ait}|a\\lambda_{it},\\beta_0,\\beta_1,\\beta_2 \\sim Pois(a\\lambda_i) \\\\\nlog(h\\lambda_{it}) = \\beta_0 + h_0 + \\beta_{1}(hO_{it} - aD_{it}) \n + \\beta_{2}(hO_{i(y-1)} - aD_{i(y-1)}) \\\\\nlog(a\\lambda_{it}) = \\beta_0  + \\beta_{1}(aO_{it} - hD_{it})  \n + \\beta_{2}(aO_{i(y-1)} - hD_{i(y-1)}) \\\\\n\\beta_0,h_0 \\sim N(0,10) \\\\\n\\beta_{1},\\beta_{2} \\sim N(1,10)\n$$\nWe felt this was a decent addition to the model because it now allowed us to see more team progression. If a team was historically bad last year, that may have an affect on how their team would perform coming into the next season. We simply mirrored the OD score difference between the home and away teams', offensive and defensive scores' from the current scores and added in a second one for their scores at the end of the last season. All prior distributions and external structure was kept from Model 1.\n \nLooking at Model 2's results, we can see that the additional $\\beta_2$ parameter on the historical team OD scores was significant. However, our average prediction error only fell to about 9.75 points. This is not a super significant change, but it does reflect that our decision to add in historic team data was a good one.\n\n##Table 5: Model Two Summary Stats\n               2.5%       25%        50%       75%        97.5%\n----------- ---------- ---------- ---------- ---------- ----------\n $\\beta_0$     3.05       3.06      3.06       3.06       3.07   \n $\\beta_1$     1.04       1.21      1.29       1.37       1.52 \n $\\beta_2$    10.59      11.25     11.60      11.96      12.63\n $h_0$         0.10       0.11      0.11       0.12       0.013\n\n\n##Figure 3\n![](photos/model2predac.png) \n\n##Figure 4\n![](photos/model2err.png)\n\n\n##Model 3\nFor our final model, we made one more addition from Model 2 that would help measure how a team progresses throughout the season. By introducing a weight distribution for each $\\beta_1$ and $\\beta_2$  that would be normally distributed based on what part of the season they were in $t\\in(1:3).\n$$\ny_{hit}|h\\lambda_{it},\\beta_0,\\beta_1,\\beta_2,h_0 \\sim Pois(h\\lambda_{i}) \\\\\ny_{ait}|a\\lambda_{it},\\beta_0,\\beta_1,\\beta_2 \\sim Pois(a\\lambda_i) \\\\\nlog(h\\lambda_{it}) = \\beta_0 + h_0 + \\beta_{1b_t}(hO_{it} - aD_{it}) \n + \\beta_{2b_t}(hO_{i(y-1)} - aD_{i(y-1)}) \\\\\nlog(a\\lambda_{it}) = \\beta_0  + \\beta_{1b_t}(aO_{it} - hD_{it})  \n + \\beta_{2b_t}(aO_{i(y-1)} - hD_{i(y-1)}) \\\\\n\\beta_0,h_0 \\sim N(0,10) \\\\\n\\beta_{1t},\\beta_{2t} \\sim N(1,10) \\; \\text{for}\\; b_t \\in (1,3)\n$$\nThis addition to the model was worthwhile because now, the rate of scoring is influenced by the OD scores from the current and past seasons, at varying parts of the season. When $\\beta_1$ and $\\beta_2$ are weighted for season section $t$, the predictions are able to reflect if a team's ability to score points is greater or worse at a specific part of a season, or even season to season, with the Model 2 addition. This inclusion of team trend seemed like a great addition to create our final model.\n\nLooking at the results of our MCMC model generation. We can see evidence of what we were looking for in our Model 3. The $\\beta_1$'s show more and more significance as the current season plays out, while the $\\beta_2$'s show less significance as the season plays out. This is to be expected because our model relied heavily on last years OD scores when making predictions early in the season, but as the season went on, turned more towards the current trending OD scores. The average prediction error for this model only fell to 9.73 points. This wasn't significantly greater than our Model 2 result, but still managed to show improvement.\n\n##Table 6: Model Three Summary Stats\n                  2.5%       25%        50%       75%        97.5%\n-------------- ---------- ---------- ---------- ---------- ----------\n $\\beta_0$         3.04       3.05      3.05       3.06       3.07   \n $\\beta_{1,1}$     0.27       0.46      0.56       0.66       0.85 \n $\\beta_{1,2}$     5.93       6.85      7.35       7.85       8.82\n $\\beta_{1,3}$    13.94      14.87     15.35      15.83      16.77\n $\\beta_{2,1}$     8.96      10.39     11.14      11.89      13.32\n $\\beta_{2,2}$     8.31       9.51     10.18      10.84      12.06\n $\\beta_{2,3}$     2.95       3.91      4.40       4.92       5.93\n $h_0$             0.10       0.11      0.11       0.12       0.13\n\n\n##Figure 5\n![](photos/model3predac.png) \n\n##Figure 6\n![](photos/model3err.png)\n\nAdditional results we wanted to look at for this final model was how the predictions of point spreads vs actual outcomes turn out when looking at specific teams. Here's some of what we found:\n\n##Figure 7\n![](photos/chi2016pred.png)\nFor Chicago, the predictions were fairly stable and consistant throughout, but there was a string of blowouts over the season that through our accuracy off.\n\n##Figure 8\n![](photos/atl2016pred.png)\n\nIn Atlanta's case, they were not very good in previous years, so their predictions were low. But they won many of their early games, many by blowouts. They would eventually move on to play in the Super Bowl this year, but it is worth noting here how our model was able to increase predictions based on the season performance.\n\n##Figure 9\n![](photos/nol2016pred.png)\n\nNew Orleans demonstrates how our model does in theory, we were very close on predicting many of the games, but there were a few unanticipated blowout games that shook up the overall results.\n\n##Figure 10\n![](photos/oak2016pred.png)\n\nLooking at Oaklands data, we can see that the predictions were decent (with the exception of a few blowouts) in the early to middle part of the season, but after week 16, Oakland's best offensive player got injured. Our model is not accustomed to react fast enough to this shock and thus predicted a much closer margin than the actual results for the remaining games.\n\n\n# Limitations\nWhile we did see some improvement in our modeling, and managed to generate prediction spreads of less than 10 points on average, there is still a lot  we could improve upon it. One of the primary limitations of this model is the limited data. With a model such as this, you need to be pulling target points from a far greater number of sources than just a few years worth of games. With the NFL only being 32 teams, and only playing a regular season of 16 games, it is difficult to get an effective quanitity of data. Adding additional parameters is also an improvement that is handcuffed by the lack of availability. There are only so many parameters we can include in which we have enough data to represent them effectively.\n\nAdditionally, as we saw across the results section, our model is very slow to respond to major shocks such as injury. This is very difficult to model, as is trying to represent the playmaking ability of a team or player that would contribute to a blowout game. These aspects of the sport are what make it so difficult for anyone to model in the first place. These are the parts of our model that if we could simply look to limit, we would improve our predictions greatly.\n\nFinally, our model does not account for the changes that occur within teams from season to season. Many players may retire, switch teams, and new prodigies may be drafted. The entire dynamic of a team could change in an offseason. While we did incorporate a way to inlude past years team stats into current day projections, the model will not make significant adjustments to this quick enough.\n\n#Whats next\nGiven the opportunity to continue this research and work more with this data to develop even better prediction models, there are a few things we would like to explore to either make the model just a little bit better, or satisfy our own curiosity about the model or the data. One of the first things we would do is look to modify the priors used in each of our models. Many of these priors are very generic and, thus, weighted heavily on the data for its predictability. Ideally there would be some greater research or intuition there to experiment and find a more solid prior distribution. Another thing we would like to do is see how this model predicts the score differential of other sports. Most sports have some sort of attack and defense aspect that can be modeled with the OD model system. Theoretically, this should be applicable to any sport.\n\n\n\n#Bibliography\n\n##Literature\nGianluca Baio and Marta Blangiardo, *Bayesian hierarchical model for the prediction of football results*, journal of Applied Statistics, Vol. 37, No. 2, February 2010, 253–264, November 2017.\n\n##Rstudio Packages\nlibrary(xml2)\nlibrary(rvest)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(lubridate)\nlibrary(readr)\nlibrary(igraph)\nlibrary(rjags)\n\n##Data Sources\nwww.footballdb.com\n\n##Other\nGoogle Chrome Selector Gadget\n\n\n\n#Apendix and Code\n\n```{r}\nlibrary(xml2)\nlibrary(rvest)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(lubridate)\n```\n\n\nhttps://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf\n\n\n##2015 Team & Score Data (first webpage)\n```\nurl2015 <- 'http://www.footballdb.com/games/index.html?lg=NFL&yr=2015'\nwebpage2015 <- read_html(url2015)\n\ndate15_html <- html_nodes(webpage2015,'td:nth-child(1) .hidden-xs')\ndate15_data <- html_text(date15_html)\n\nvisitteam15_html <- html_nodes(webpage2015,'td:nth-child(2) .hidden-xs')\nvisitteam15_data <- html_text(visitteam15_html)\n\nvisitscore15_html <- html_nodes(webpage2015,'#leftcol .center:nth-child(3)')\nvisitscore15_data <- html_text(visitscore15_html)\nvisitscore15_data <-as.numeric(visitscore15_data)\n\nhometeam15_html <- html_nodes(webpage2015,'.center+ td > .hidden-xs')\nhometeam15_data <- html_text(hometeam15_html)\n\nhomescore15_html <- html_nodes(webpage2015,'.center:nth-child(5)')\nhomescore15_data <- html_text(homescore15_html)\nhomescore15_data <-as.numeric(homescore15_data)\n\nfbscores2015 <- data.frame(Date = date15_data, Visiting_Team = visitteam15_data, Visiting_Score = visitscore15_data, Home_Team = hometeam15_data, Home_Score = homescore15_data)\n#fbscores2015\n```\n\n##2016 Team & Score Data \n```\nurl2016 <- 'http://www.footballdb.com/games/index.html?lg=NFL&yr=2016'\nwebpage2016 <- read_html(url2016)\n\ndate16_html <- html_nodes(webpage2016,'td:nth-child(1) .hidden-xs')\ndate16_data <- html_text(date16_html)\n\nvisitteam16_html <- html_nodes(webpage2016,'td:nth-child(2) .hidden-xs')\nvisitteam16_data <- html_text(visitteam16_html)\n\nvisitscore16_html <- html_nodes(webpage2016,'#leftcol .center:nth-child(3)')\nvisitscore16_data <- html_text(visitscore16_html)\nvisitscore16_data <-as.numeric(visitscore16_data)\n\nhometeam16_html <- html_nodes(webpage2016,'.center+ td > .hidden-xs')\nhometeam16_data <- html_text(hometeam16_html)\n\nhomescore16_html <- html_nodes(webpage2016,'.center:nth-child(5)')\nhomescore16_data <- html_text(homescore16_html)\nhomescore16_data <-as.numeric(homescore16_data)\n\nfbscores2016 <- data.frame(Date = date16_data, Visiting_Team = visitteam16_data, Visiting_Score = visitscore16_data, Home_Team = hometeam16_data, Home_Score = homescore16_data)\n#fbscores2016\n```\n\n##2017 Team & Score Data \n```\nurl2017 <- 'http://www.footballdb.com/games/index.html?lg=NFL&yr=2017'\nwebpage2017 <- read_html(url2017)\n\ndate17_html <- html_nodes(webpage2017,'td:nth-child(1) .hidden-xs')\ndate17_data <- html_text(date17_html)\ndate17_data <- as.Date(date17_data,\"%m/%d/%Y\")\n\nvisitteam17_html <- html_nodes(webpage2017,'td:nth-child(2) .hidden-xs')\nvisitteam17_data <- html_text(visitteam17_html)\n\nvisitscore17_html <- html_nodes(webpage2017,'#leftcol .center:nth-child(3)')\nvisitscore17_data <- html_text(visitscore17_html)\nvisitscore17_data <-as.numeric(visitscore17_data)\n\nhometeam17_html <- html_nodes(webpage2017,'.center+ td > .hidden-xs')\nhometeam17_data <- html_text(hometeam17_html)\n\nhomescore17_html <- html_nodes(webpage2017,'.center:nth-child(5)')\nhomescore17_data <- html_text(homescore17_html)\nhomescore17_data <-as.numeric(homescore17_data)\n\nfbscores2017 <- data.frame(Date = date17_data, Visiting_Team = visitteam17_data, Visiting_Score = visitscore17_data, Home_Team = hometeam17_data, Home_Score = homescore17_data)\n#fbscores2017\n```\n\n```\ndate_html <- html_nodes(webpage2017,'td:nth-child(1) .hidden-xs , .divheader')\ndate_data <- html_text(date_html)\n#date_data\n\nweek <- rep(0,256)\nif (date17_data >= \"2017-09-14\") week=1 else week=0\nmutate(fbscores2017, Week=week)\n\n#date17_data\n#week <- rep(0,50)\n\n```\n\n\n```{r}\n url <- \"http://www.footballdb.com/games/boxscore.html?gid=2017091001\"\n  \n  #Reading the HTML code from the website\n  webpage <- read_html(url)\n  \n  title_data_html <- html_nodes(webpage,\"#divBox_team tbody .left\")\n  title_data <- html_text(title_data_html)\n  title_data <- append(c(\"Team\", \"Points\"), title_data)\n  \n  \n  #Create game event (single row that describes game)\n  home_variables <- paste0(rep(\"Home_\",length(title_data)),title_data)\n  away_variables <- paste0(rep(\"Away_\",length(title_data)),title_data)\n  event_variables <- append(home_variables,away_variables)\n  event_variables <- append(c(\"Date\",\"Week\"),event_variables)\n```\n\n```{r}\ncreateDateVector <- function(year){\n  url <- paste0('http://www.footballdb.com/games/index.html?lg=NFL&yr=',toString(year))\n  webpage <- read_html(url)\n  date_html <- html_nodes(webpage,'td:nth-child(1) .hidden-xs')\n  date_data <- html_text(date_html)\n  dateVect <- as.Date(date_data,\"%m/%d/%Y\")\n  \n  today = today()\n  daysBeforeToday = dateVect <today\n  dateVect = dateVect[daysBeforeToday]\n}\n```\n\n```{r}\ndateToURL <- function(dateVect, i, adjustment=0){\n  url_base <- 'http://www.footballdb.com/games/boxscore.html?gid='\n  url_year = year(dateVect[i])\n  if(month(dateVect[i])<10){\n    url_month <- paste0(\"0\",month(dateVect[i]))\n  }else{\n    (url_month <-toString(month(dateVect[i])))\n   }\n  if(day(dateVect[i])<10){\n    url_day <- paste0(\"0\",day(dateVect[i]))\n  }else{\n    url_day <-toString(day(dateVect[i]))\n  }\n  \n  gameNum = 1\n  location = i-1\n  if(location >0){\n    while(dateVect[i]==dateVect[location]){\n      gameNum = gameNum+1\n      location=location-1\n      \n      if(location==0){\n        break\n      }\n    }\n  }\n  \n  gameNum = gameNum + adjustment\n  \n  if(gameNum<10){\n    url_gamenum <- paste0(\"0\",toString(gameNum))\n  }else{\n    url_gamenum <-toString(gameNum)\n  }\n\n  url <- paste0(url_base,url_year,url_month,url_day,toString(url_gamenum))\n\n  \n  return(list(url=url,url_year=url_year,url_month = url_month,url_day=url_day))\n}\n```\n```{r}\nyearlyStats <- function(dateVect){\n  data = matrix(rep('',length(event_variables)),nrow=1)\n  \n  for(i in 1:length(dateVect)){\n\n\n    url_info <- dateToURL(dateVect,i)\n    url <- url_info$url\n    \n    webpage <- read_html(url)\n  \n  \n    away_data_html <- html_nodes(webpage,'#divBox_team .row1 .left+ td , .section_left .left+ td .hidden-xs , #divBox_team .row0 .left+ td')\n    away_data <- html_text(away_data_html)\n    away_points <- html_text(html_nodes(webpage,'#leftcol .header+ .center td+ td b'))\n    away_data <- append(away_data,away_points, after = 1)\n  \n    home_data_html <- html_nodes(webpage,\"#divBox_team .row1 .left~ td+ td , #divBox_team .row0 .left~ td+ td , .section_left .left~ td+ td .hidden-xs\")\n    home_data <- html_text(home_data_html)\n    home_points <- html_text(html_nodes(webpage,'#leftcol .row0+ .center td+ td b'))\n    home_data <- append(home_data,home_points, after = 1)\n    \n    week_info <- html_text(html_nodes(webpage,'#breadcrumbs a~ a+ a'))\n  \n    date = paste0(url_info$url_month,\"/\",url_info$url_day,\"/\",url_info$url_year)\n    date = append(date,week_info)\n    game_data = append(date,home_data)\n    game_data = append(game_data,away_data)\n    \n    \n    \n    adjustment = 1\n    while(length(game_data)==2 |length(game_data)==1){\n      url <- dateToURL(dateVect,i,adjustment = adjustment)$url\n    \n      webpage <- read_html(url)\n    \n      away_data_html <- html_nodes(webpage,'#divBox_team .row1 .left+ td , .section_left .left+ td .hidden-xs , #divBox_team .row0 .left+ td')\n      away_data <- html_text(away_data_html)\n      away_points <- html_text(html_nodes(webpage,'#leftcol .header+ .center td+ td b'))\n      away_data <- append(away_data,away_points, after = 1)\n    \n      home_data_html <- html_nodes(webpage,\"#divBox_team .row1 .left~ td+ td , #divBox_team .row0 .left~ td+ td , .section_left .left~ td+ td .hidden-xs\")\n      home_data <- html_text(home_data_html)\n      home_points <- html_text(html_nodes(webpage,'#leftcol .row0+ .center td+ td b'))\n      home_data <- append(home_data,home_points, after = 1)\n      \n      week_info <- html_text(html_nodes(webpage,'#breadcrumbs a~ a+ a'))\n\n    \n      date = paste0(url_info$url_month,\"/\",url_info$url_day,\"/\",url_info$url_year)\n      date = append(date,week_info)\n      game_data = append(date,home_data)\n      game_data = append(game_data,away_data)\n    \n      adjustment = adjustment+1\n    \n    \n      if(adjustment >100){\n        print(\"ERROR: ADJUSTMENT TOO LARGE\")\n        print(i)\n        break\n      }\n  \n    }\n    data = rbind(data,game_data)\n  \n  }\n  return(data)\n}\n```\n```{r}\ncreateDataframe <- function(year){\n  \n  #Create DFs\n  \n  dateVect = createDateVector(year)\n  data_mat = yearlyStats(dateVect)\n  data_mat = data_mat[-1,]\n  game_stats <- data.frame(data_mat)\n  names(game_stats)[1:length(event_variables)] <- event_variables\n  names(game_stats)[c(12,40)] <- c('Home_Avg Rush Gain','Away_Avg Rush Gain')\n  return(game_stats)\n    \n}\n```\n```{r}\n#Create game stats dataframes and remove rows where errors occur\ngame_stats_2010 <- createDataframe(2010)\ngame_stats_2010<- game_stats_2010[-c(208,240),]\n\ngame_stats_2011 <- createDataframe(2011)\ngame_stats_2012 <- createDataframe(2012)\ngame_stats_2013 <- createDataframe(2013)\ngame_stats_2014 <- createDataframe(2014)\ngame_stats_2014<- game_stats_2014[-176,]\ngame_stats_2015 <- createDataframe(2015)\ngame_stats_2016 <- createDataframe(2016)\n\n```\n\n\n```{r}\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(lubridate)\nlibrary(readr)\nlibrary(igraph)\n```\n### Functions\n```{r}\nmodifyWeek <- function(dataframe){\n#Modifies week variable from a string to a number\n  modifiedData <- dataframe\n  week <- dataframe$`Week`\n  \n  weekNum <- extract_numeric(week)\n  wildcard <- grepl(\"Wild\",week)\n  division <- grepl(\"Divisional\",week)\n  conference <- grepl(\"Conference\",week)\n  super <- grepl(\"Super\",week)\n\n  for(i in 1:length(weekNum)){\n    if(is.na(weekNum[i])){\n      if(wildcard[i]){\n        weekNum[i] <- 18\n      } else if(division[i]){\n        weekNum[i]<-19\n      } else if(conference[i]){\n        weekNum[i]<-20\n      } else if(super[i]){\n        weekNum[i] <-21\n      }\n    }\n  }\n  \n  modifiedData$`Week` <- weekNum\n  return(modifiedData)\n}\n\nsimplify <- function(dataframe){\n#Modifies the full dataset to only include columns of interest\n \n   modifiedData <- dataframe %>%  \n    select(Date:Home_Points,contains('Home_Net Yards Rushing'):contains('Home_Avg. Yds/Att'),Away_Team,Away_Points,contains('Away_Net Yards Rushing'):contains('Away_Avg. Yds/Att'),-contains('Home_Sacked'):-contains('Home_Gross'),-contains('Away_Sacked'):-contains('Away_Gross')) %>%\n    separate(`Away_Att - Comp - Int`,c('Away_Att','Away_Comp','Away_Int')) %>%\n    separate(`Home_Att - Comp - Int`,c('Home_Att','Home_Comp','Home_Int')) %>%\n    select(-`Home_Comp`,-`Home_Int`,-`Away_Comp`,-`Away_Int`) \n \n\n  \n  #Converts vectors that are not numbers to characters\n  modifiedData[,c(1,3,11)] <- data.frame(apply(modifiedData[,c(1,3,11)], 2, as.factor))\n  modifiedData[,c(1,3,11)] <- data.frame(apply(modifiedData[,c(1,3,11)], 2, as.character))\n\n  \n  #Converts vectors that contain numbers to type double\n  numVectors = (1:ncol(modifiedData))[-c(1,2,3,11)]\n  modifiedData[,numVectors] <- data.frame(apply(modifiedData[,numVectors], 2, as.factor))\n  modifiedData[,numVectors] <- data.frame(apply(modifiedData[,numVectors], 2, as.numeric))\n  \n  \n  \n\n\n  \n  #Adjust Average Passing Yards/Attempt Stat to Net yards, not Gross yards\n  modifiedData$`Home_Pass Gain/Att` = modifiedData$`Home_Net Yards Passing`/modifiedData$`Home_Att`\n  modifiedData$`Away_Pass Gain/Att` = modifiedData$`Away_Net Yards Passing`/modifiedData$`Away_Att`\n  \n  modifiedData <- modifyWeek(modifiedData)\n  modifiedData <- modifiedData[,c(1:9,19,11:17,20,10,18)]\n  modifiedData <- modifiedData[,-c(19,20)]\n  \n  modifiedData <- modifiedData %>%\n    mutate_each_( funs(as.character(.)), names( .[,sapply(., is.factor)] ))\n\n  return(modifiedData)\n}\n```\n```{r}\ndataToGraph <- function(dataframe,week,stat){\n#Convert the season data to a graph format\n#week is the last week that you have data for i.e. use week = 7 to make predictions for week 8\n#stat is the column number of the home stat that you want to observe\n  \n  homeCol = stat\n  awayCol = stat + 8\n  \n  modifiedData <- dataframe %>%\n    filter(Week < week) %>%\n    select(Home_Team,Away_Team,homeCol,awayCol) \n  \n  home_data = modifiedData[,-c(4)]\n  colnames(home_data)[3] = 'weight'\n  away_data = modifiedData[,c(2,1,4,3)]\n  away_data = away_data[,-c(4)]\n  colnames(away_data)[3] = 'weight'\n\n  \n  h = graph.data.frame(home_data,directed = TRUE)\n  h$weight <- home_data[,3]\n  a = graph.data.frame(away_data,directed=TRUE)\n  a$weight <- away_data[,3]\n  \n  g = union(h,a)\n  \n  E(g)$weight_1[is.na(E(g)$weight_1)]<-0\n  E(g)$weight_2[is.na(E(g)$weight_2)]<-0\n  E(g)$weight <- E(g)$weight_1 +E(g)$weight_2\n  \n  g<- delete_edge_attr(g,'weight_1')\n  g<- delete_edge_attr(g,'weight_2')\n\n  \n  return(g)\n}\n```\n```{r}\ninitOffenseDefense = function(graph) {\n  num_vertices = length(V(graph))\n  offense = rep(1,num_vertices)\n  defense = rep(1,num_vertices)\n  list(offense=offense,defense=defense)\n}\n\n\n\n```\n\n```{r}\n\nupdate = function(A,o,games_ratios) {\n  (t(A) %*% (1/(games_ratios*(A %*% (1/o)))))* games_ratios \n}\n\nrun_alg = function(A,o,games_ratios,epsilon = 0.5*10^-4) {\n  diff = Inf\n  while(diff > epsilon) {\n    new_o = update(A,o,games_ratios)\n    diff = sqrt(t(new_o - o) %*% (new_o - o))\n    o = new_o\n  }\n  return(o)\n}\n\nget_games_ratios = function(g) {\n  max(degree(g))/degree(g)\n}\nget_defense = function(A,o,games_ratios) {\n  (A %*% (1/o)) * games_ratios\n}\n\n\ncalculateOD <- function(g, e = .5*10^-5){\n  #initialize offense vectors to have every team with an offensive score of 1\n  offense = rep(1,length(V(g)))\n  \n  Adj = as.matrix(get.adjacency(g,attr='weight'))\n  Adj = Adj + e*(offense %*% t(offense) - diag(length(V(g))))\n  Adj = t(Adj)\n\n  games_ratios = get_games_ratios(g)\n  \n  final_offense = run_alg(Adj, offense,games_ratios,epsilon = e)\n  final_defense = get_defense(Adj,final_offense,games_ratios)\n  \n  # offenseVect = final_offense - mean(final_offense)\n  offenseVect =final_offense / sum(final_offense)\n  offenseVect = offenseVect - mean(offenseVect)\n  # offenseVect = offenseVect[order(offenseVect,decreasing = TRUE),,drop=FALSE]\n  \n  defenseVect = 1/(final_defense) \n  defenseVect = defenseVect/sum(defenseVect)\n  defenseVect = defenseVect - mean(defenseVect)\n  # defenseVect = defenseVect[order(defenseVect,decreasing = TRUE),,drop=FALSE]\n  \n  return(list(offense = offenseVect, defense = defenseVect))\n}\n\ncreateODDF <- function(rawData){\n  data <- simplify(rawData)\n\n  teamData <- data.frame()\n  \n  #calculate OD \n  columns = c(5,7,8,10)\n  for(i in 2:max(data$Week)){\n  #Create DF based on OD for points\n    OD <- calculateOD(dataToGraph(data,i,4))\n    offense <-OD$offense\n    defense <- OD$defense\n    \n    week = rep(i,length(offense))\n    teams <- names(offense[,1])\n    \n    weeklyDF <- data.frame(week,teams,offense,defense)\n\n    for(j in columns){\n    #Expand this DF to include OD for other stats\n      OD <- calculateOD(dataToGraph(data,i,j))\n      offense <-OD$offense\n      defense <- OD$defense\n      \n      week = rep(i,length(offense))\n      teams <- names(offense[,1])\n      w <- data.frame(week,teams,offense,defense)\n      \n      weeklyDF <- weeklyDF %>%\n        left_join(w,by= c(\"week\"=\"week\",\"teams\" = \"teams\"))\n    }\n    \n    teamData <- teamData %>%\n      bind_rows(weeklyDF)\n  }\n  \n  colnames(teamData) <- c(\"Week\",'Team',\"O_Points\",\"D_Points\",\"O_Net Rush\",\"D_Net Rush\",\"O_Avg Rush\",\"D_Avg Rush\",\"O_Net Pass\",'D_Net Pass','O_Avg Pass','D_Avg Pass')\n  \n  return(teamData)\n}\n\n\n# OD_2016 <-createODDF(game_stats_2016)\n# View(OD_2016)\n```\n```{r}\n# g = dataToGraph(data_2016,23,6)\n# Adj = as.matrix(get.adjacency(g,attr='weight'))\n```\n\n\n\n```{r}\ncreateOffensiveData <- function(gameData){\n  \n  homeData = gameData[,c(1:10)]\n  awayData = gameData[,c(1:2,11:18)]\n  \n  home_names = c(colnames(homeData)[1:2],unlist(strsplit(colnames(homeData[3:length(colnames(homeData))]), split='_', fixed=TRUE))[seq(2,16,by=2)])\n  colnames(homeData) = home_names\n  colnames(awayData) = home_names\n  \n  modifiedData = bind_rows(awayData,homeData)\n  \n  modifiedData <- modifiedData %>%\n    group_by(Team) %>%\n    arrange(Team,Week) %>%\n    mutate(`cumavg rush` = cummean(`Avg Rush Gain`)) %>%\n    mutate(`cumavg pass` = cummean(`Pass Gain/Att`)) %>%\n    mutate(`cumavg total rush` = cummean(`Net Yards Rushing`)) %>%\n    mutate(`cumavg total pass` = cummean(`Net Yards Passing`)) %>%\n    mutate('Next Week' = `Week`+1 )\n  \n  modifiedData <- modifiedData[,-c(4:10)]\n  modifiedData <- modifiedData[,c(8,3:7,1:2)]\n  modifiedData <-modifiedData[,-c(7:8)]\n  \n  colnames(modifiedData)[3:6] = paste0(\"Offense \", colnames(modifiedData)[3:6])\n  \n  \n  \n  #Missing infrormation for after the team's bye week\n  for(i in 2:nrow(modifiedData))\n    if(modifiedData$`Next Week`[i-1] + 2 == modifiedData$`Next Week`[i]){\n      newRow = modifiedData[i-1,]\n      newRow$`Next Week` = modifiedData[i-1,]$`Next Week` +1\n      \n      modifiedData <- bind_rows(modifiedData,newRow)\n    }\n  \n  modifiedData <- modifiedData %>% \n    arrange(Team,`Next Week`)\n\n  \n  \n  return(modifiedData)\n}\n```\n```{r}\ncreateDefensiveData <- function(gameData){\n  homeData = gameData[,c(1:3,12:18)]\n  awayData = gameData[,c(1:2,11,4:10)]\n  \n  home_names = c(colnames(homeData)[1:2],unlist(strsplit(colnames(homeData[3:length(colnames(homeData))]), split='_', fixed=TRUE))[seq(2,16,by=2)])\n  colnames(homeData) = home_names\n  colnames(awayData) = home_names\n\n  modifiedData = bind_rows(awayData,homeData)\n\n  modifiedData <- modifiedData %>%\n    group_by(Team) %>%\n    arrange(Team,Week) %>%\n    mutate(`cumavg rush` = cummean(`Avg Rush Gain`)) %>%\n    mutate(`cumavg pass` = cummean(`Pass Gain/Att`)) %>%\n    mutate(`cumavg total rush` = cummean(`Net Yards Rushing`)) %>%\n    mutate(`cumavg total pass` = cummean(`Net Yards Passing`)) %>%\n    mutate('Next Week' = `Week`+1 )\n\n  modifiedData <- modifiedData[,-c(4:10)]\n  modifiedData <- modifiedData[,c(8,3:7,1:2)]\n  modifiedData <-modifiedData[,-c(7:8)]\n  \n  colnames(modifiedData)[3:6] = paste0(\"Defense \", colnames(modifiedData)[3:6])\n\n\n\n  #Missing infrormation for after the team's bye week\n  for(i in 2:nrow(modifiedData))\n    if(modifiedData$`Next Week`[i-1] + 2 == modifiedData$`Next Week`[i]){\n      newRow = modifiedData[i-1,]\n      newRow$`Next Week` = modifiedData[i-1,]$`Next Week` +1\n\n      modifiedData <- bind_rows(modifiedData,newRow)\n    }\n\n  modifiedData <- modifiedData %>%\n    arrange(Team,`Next Week`)\n\n  \n  \n  return(modifiedData)\n}\n\ncreateTeamData <- function(gameData){\n  defenseData <- createDefensiveData(gameData)\n  offenseData <- createOffensiveData(gameData)\n  \n  teamData <- offenseData %>%\n    left_join(defenseData, by= c(\"Next Week\"=\"Next Week\",\"Team\" = \"Team\"))\n  \n  return(teamData)\n\n\n}\n\n```\n\n\n```{r}\ncreateModelDF <- function(rawDataframe, prevYearRawDataframe){\n  game_data <- simplify(rawDataframe)\n  \n\n  \n  OD_dataframe <- createODDF(rawDataframe) %>%\n      select(Week,Team,contains(\"O_\"),contains(\"D_\"))\n  \n  prev_OD_dataframe <- createODDF(prevYearRawDataframe) %>%\n    select(Week,Team,contains(\"Points\")) %>%\n    filter(Week>20) %>%\n    rename(`O_Points_Last_Year` = O_Points) %>%\n    rename(`D_Points_Last_Year` = D_Points) %>%\n    select(-Week)    \n\n  \n  \n  OD_dataframe$Team = as.character(OD_dataframe$Team)\n  prev_OD_dataframe$Team = as.character(prev_OD_dataframe$Team)\n  \n  #Account for team name changes\n  oldTeam = \"St. Louis\"\n  newTeam = \"Los Angeles\"\n\n  game_data[ game_data == oldTeam ] <- newTeam\n  OD_dataframe[OD_dataframe==oldTeam]<- newTeam\n  prev_OD_dataframe[prev_OD_dataframe==oldTeam]<-newTeam\n  \n  \n  \n  game_id = data.frame(1:nrow(game_data))\n  \n  team_names <- game_data %>%\n    group_by(Home_Team) %>%\n    summarise() \n  \n  colnames(team_names)<- \"Team\"\n  \n  team_id = data.frame(1:nrow(team_names))\n  \n  team_ids <- bind_cols(team_names,team_id)\n  home_ids <- team_ids \n  colnames(home_ids)[2] = \"Home_id\"\n  away_ids <- team_ids\n  colnames(away_ids)[2] = \"Away_id\"\n  game_data <- game_data %>%\n    left_join(home_ids,by = c(\"Home_Team\" = \"Team\")) %>%\n    left_join(away_ids,by = c(\"Away_Team\"= \"Team\")) %>% \n    select(Date,Week,Home_Team,Home_id,Home_Points,Away_Team,Away_id,Away_Points)\n  \n\n  \n\n  \n  \n  H_data <- OD_dataframe \n  A_data <- OD_dataframe\n  \n  H_prev <- prev_OD_dataframe\n  A_prev <- prev_OD_dataframe\n  \n  colnames(H_data)[1:ncol(H_data)] <- paste0(\"Home_\",colnames(H_data)[1:ncol(H_data)])\n  colnames(A_data)[1:ncol(A_data)] <- paste0(\"Away_\",colnames(A_data)[1:ncol(A_data)])\n  \n  colnames(H_prev)[1:ncol(H_prev)] <- paste0(\"Home_\",colnames(H_prev)[1:ncol(H_prev)])\n  colnames(A_prev)[1:ncol(A_prev)] <- paste0(\"Away_\",colnames(A_prev)[1:ncol(A_prev)])\n  \n  \n  game_data <- game_data %>%\n    bind_cols(game_id) %>%\n    left_join(H_data,by = c(\"Week\" = \"Home_Week\", \"Home_Team\"=\"Home_Team\")) %>%\n    left_join(H_prev,by = c(\"Home_Team\"=\"Home_Team\")) %>%\n    left_join(A_data,by = c(\"Week\" = \"Away_Week\", \"Away_Team\"=\"Away_Team\")) %>%\n    left_join(A_prev,by = c(\"Away_Team\"=\"Away_Team\")) %>%\n    select(Date,Week,contains(\"Home_\"),contains(\"Away_\")) %>%\n    filter(Week >3) %>%\n    arrange(Week,Home_Team)\n  \n  binnedWeeks <- rep(0, nrow(game_data))\n  weeks <- game_data$Week\n  # for(i in 1:length(weeks)){\n  #   if(weeks[i]>=1 & weeks[i]<=5){\n  #     binnedWeeks[i]=1\n  #   } else if(weeks[i]>=6 & weeks[i]<=10){\n  #     binnedWeeks[i] = 2\n  #   } else if(weeks[i]>=11 & weeks[i] <=14){\n  #     binnedWeeks[i] = 3\n  #   } else{\n  #     binnedWeeks[i] = 4\n  #   }\n  # }\n  \n  for(i in 1:length(weeks)){\n    if(weeks[i]>=1 & weeks[i]<=5){\n      binnedWeeks[i] = 1\n    } else if(weeks[i]>=5 & weeks[i] <=10){\n      binnedWeeks[i] = 2\n    } else{\n      binnedWeeks[i] = 3\n    }\n  }\n  binnedWeeks <-data.frame(binnedWeeks)\n  colnames(binnedWeeks)<- \"binnedWeeks\"\n  \n  game_data <- bind_cols(game_data,binnedWeeks)\n  \n  return(game_data)\n}\n\n\n# View(createModelDF(game_stats_2016,game_stats_2015))\n# View(createModelDF(game_stats_2015,game_stats_2014))\n\n\n```\n\n\n\n\nwrite.csv(modelDF2016,\"modelData2016.csv\")\n\n\n```{r}\n# data_2014 <-simplify(game_stats_2016)\n# data_2015 <-simplify(game_stats_2016)\n# data_2016 <-simplify(game_stats_2016)\n# data_2017 <-simplify(game_stats_2016)\n\n modelDF2011 <- createModelDF(game_stats_2011,game_stats_2010)\n modelDF2012 <- createModelDF(game_stats_2012,game_stats_2011)\n modelDF2013 <- createModelDF(game_stats_2013,game_stats_2012)\n modelDF2014 <- createModelDF(game_stats_2014,game_stats_2013)\n modelDF2015 <- createModelDF(game_stats_2015,game_stats_2014)\n modelDF2016 <- createModelDF(game_stats_2016,game_stats_2015)\n```\n\n```{r} \n#Data filtered to later weeks to avoid noise\n\nmodelData <-modelDF2015 %>% \n  bind_rows(modelDF2014) %>%\n  bind_rows(modelDF2013) %>%\n  bind_rows(modelDF2012) %>%\n  bind_rows(modelDF2011)\n\n```\n\n\n\n```{r}\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(lubridate)\nlibrary(readr)\nlibrary(igraph)\nlibrary(rjags)\n\n```\n```{r}\nscore_diff <- \"model{\n  #Data\n  for(i in 1:length(H_pts)) {\n    H_pts[i] ~ dpois(H_lam[i])\n    A_pts[i] ~ dpois(A_lam[i])\n  \n    log(H_lam[i]) <- b0+ h0 + b1*(h_O[i] - a_D[i])\n    log(A_lam[i]) <- b0 + b1*(a_O[i] - h_D[i]) \n  }\n  \n  #Priors\n  h0 ~ dnorm(0,1/10)\n\n  b0 ~ dnorm(0,1/10)\n  b1 ~ dnorm(1,1/10)\n  b2 ~ dnorm(1,1/10)\n}\"\n\nscore_diff_jags <- jags.model(textConnection(score_diff),\n                              \ndata= list(H_pts = modelData$Home_Points, A_pts = modelData$Away_Points, h_D= modelData$Home_D_Points , h_O= modelData$Home_O_Points , a_D= modelData$Away_D_Points , a_O= modelData$Away_O_Points),\n\ninits=list(.RNG.name=\"base::Wichmann-Hill\", .RNG.seed=1989))\n\nscore_diff_sim <- coda.samples(score_diff_jags, variable.names=c(\"h0\",\"b0\",\"b1\"), n.iter=10000)\n   \nscore_diff_sample <- data.frame(step=1:10000, score_diff_sim[[1]])\nhead(score_diff_sample)\n```\n```{r}\nsummary(score_diff_sim)\nplot(score_diff_sim)\n```\n\n```{r}\nset.seed(13)\n\npredictScoreDiff <- function(modelDFRow){\n  predictions = \n    rpois(10000,exp(score_diff_sample$h0 + score_diff_sample$b0 + score_diff_sample$b1*(modelDFRow$Home_O_Points - modelDFRow$Away_D_Points))) - \n    rpois(10000, exp(score_diff_sample$b0 + score_diff_sample$b1*(modelDFRow$Away_O_Points - modelDFRow$Home_D_Points)))\n\n}\n\ncomparePrediction <- function(modelDF){\n  accuracyVect = rep(0,nrow(modelDF))\n  for(i in 1:nrow(modelDF)){\n    scoreDiff = modelDF$Home_Points[i] - modelDF$Away_Points[i]\n    predictionsDF = data.frame(predictScoreDiff(modelDF[i,])) \n    meanPredictions = round(mean(predictionsDF[,1]))\n    accuracyVect[i] = round(scoreDiff - meanPredictions)\n  }\n  accuracyDF = data.frame(accuracyVect,abs(accuracyVect))\n  colnames(accuracyDF)<- c(\"Prediction Accuracy\",\"Error\")\n  return(accuracyDF)\n}\n\n```\n\n```{r}\nset.seed(13)\npredictions2016 = comparePrediction(modelDF2016)\n# View(predictions2016)\n\nmean(predictions2016$`Prediction Accuracy`)\nmean(predictions2016$Error)\nggplot(predictions2016, aes(x=`Prediction Accuracy`)) + geom_histogram(binwidth = 3, aes(y=..density..))\nggplot(predictions2016, aes(x=`Error`)) + geom_histogram(binwidth = 3, aes(y=..density..))\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n#Second Model\n```{r}\nfinal <- \"model{\n  #Data\n  for(i in 1:length(H_pts)) {\n    H_pts[i] ~ dpois(H_lam[i])\n    A_pts[i] ~ dpois(A_lam[i])\n  \n    log(H_lam[i]) <- b0 + h0 + b1*(h_O[i] - a_D[i]) + b2*(hprior_O[i] - aprior_D[i]) \n    log(A_lam[i]) <- b0 + b1*(a_O[i] -h_D[i]) + b2*(aprior_O[i] - hprior_D[i]) \n  }\n\n\n  #Priors\n  b0 ~ dnorm(0,1/10)\n  h0 ~ dnorm(0,1/10)\n\n  b1 ~ dnorm(1,1/10)\n  b2 ~ dnorm(1,1/10)\n\n\n}\"\n\nfinal_jags <- jags.model(textConnection(final),\n                              \ndata= list(H_pts = modelData$Home_Points, A_pts = modelData$Away_Points,h_D= modelData$Home_D_Points , h_O= modelData$Home_O_Points , a_D= modelData$Away_D_Points , a_O= modelData$Away_O_Points,hprior_O = modelData$Home_O_Points_Last_Year,hprior_D = modelData$Home_D_Points_Last_Year,aprior_O = modelData$Away_O_Points_Last_Year,aprior_D = modelData$Away_D_Points_Last_Year),\n\ninits=list(.RNG.name=\"base::Wichmann-Hill\", .RNG.seed=1989))\n\nfinal_sim <- coda.samples(final_jags, variable.names=c(\"h0\",\"b0\",\"b1\",\"b2\"), n.iter=10000)\n   \nfinal_sample <- data.frame(step=1:10000, final_sim[[1]])\nhead(final_sample)\n```\n```{r}\nsummary(final_sim)\nplot(final_sim)\n```\n```{r}\nset.seed(13)\nsingle_prediction <- function(modelDFRow, predictionsDF){\n  home_pred = rpois(10000,exp(predictionsDF$h0 + predictionsDF$b0 + predictionsDF$b1*(modelDFRow$`Home_O_Points` - modelDFRow$`Away_D_Points`) + predictionsDF$b2*(modelDFRow$`Home_O_Points_Last_Year` - modelDFRow$`Away_D_Points_Last_Year`)))\n  \n  away_pred = rpois(10000,exp(predictionsDF$b0 + predictionsDF$b1*(modelDFRow$`Away_O_Points` - modelDFRow$`Home_D_Points`) + predictionsDF$b2*(modelDFRow$`Away_O_Points_Last_Year` - modelDFRow$`Home_D_Points_Last_Year`)))\n  \n  return(list(score_diff = home_pred - away_pred, total_pts = home_pred + away_pred))           \n}\n\nall_predictions <- function(data, sampleDF){\n  score_diff_predictions = rep(0,nrow(data))\n  total_points_predictions = rep(0,nrow(data))\n  for(i in 1:nrow(data)){\n    prediction = single_prediction(data[i,],sampleDF)\n    score_diff_predictions[i] = round(mean(prediction$score_diff))\n    total_points_predictions[i] = round(mean(prediction$total_pts))\n  }\n  predictionsDF = data.frame(score_diff_predictions,total_points_predictions)\n\n  newDF = bind_cols(data,predictionsDF)\n  return(newDF)\n}\n```\n\n```{r}\nset.seed(13)\npredictions2016 = all_predictions(modelDF2016,final_sample)\n# View(predictions2016)\n\n\n\npredictions2016 <- predictions2016 %>%\n  mutate(score_diff = Home_Points - Away_Points) %>%\n  mutate(score_accuracy = score_diff_predictions - score_diff) %>%\n  mutate(score_error = abs(score_accuracy)) %>%\n  mutate(total_pts = Home_Points + Away_Points) %>%\n  mutate(total_pts_accuracy = total_points_predictions - total_pts) %>%\n  mutate(total_error = abs(total_pts_accuracy)) %>%\n  select(Date,Week,Home_Team,Home_Points,Away_Team,Away_Points,contains('score'),contains('total'))\n\nmean(predictions2016$`score_accuracy`)\nmean(predictions2016$score_error)\nggplot(predictions2016, aes(x=`score_accuracy`)) + geom_histogram(binwidth = 3, aes(y=..density..))\nggplot(predictions2016, aes(x=`score_error`)) + geom_histogram(binwidth = 3, aes(y=..density..))\n\n```\n\n\n```{r}\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(lubridate)\nlibrary(readr)\nlibrary(igraph)\nlibrary(rjags)\n\n```\n\n\n```\n#Data filtered to later weeks to avoid noise\n\nmodelData <-modelDF2015 %>% \n  bind_rows(modelDF2014) %>%\n  bind_rows(modelDF2013) %>%\n  bind_rows(modelDF2012) %>%\n  bind_rows(modelDF2011)\n\n\nmodelDF2016 <- filter(modelDF2016,Week>3)\n```\n\nGoal:\nCreate a model that predicts the score differential in a game\n\n```{r}\nfinal <- \"model{\n  #Data\n  for(i in 1:length(H_pts)) {\n    H_pts[i] ~ dpois(H_lam[i])\n    A_pts[i] ~ dpois(A_lam[i])\n  \n    log(H_lam[i]) <- b0 + h0 + b1[w[i]]*(h_O[i] - a_D[i]) + b2[w[i]]*(hprior_O[i] - aprior_D[i]) \n    log(A_lam[i]) <- b0 + b1[w[i]]*(a_O[i] -h_D[i]) + b2[w[i]]*(aprior_O[i] - hprior_D[i]) \n  }\n\n  #Modify the weighting on the relationship between current stats and the priors over time.\n  for(t in 1:3){\n    b1[t] ~ dnorm(1,1/10)\n    b2[t] ~ dnorm(1,1/10)\n\n  }\n\n\n  #Priors\n\n  b0 ~ dnorm(0,1/10)\n  h0 ~ dnorm(0,1/10)\n\n\n}\"\n\nfinal_jags <- jags.model(textConnection(final),\n                              \ndata= list(H_pts = modelData$Home_Points, A_pts = modelData$Away_Points,h_D= modelData$Home_D_Points , h_O= modelData$Home_O_Points , a_D= modelData$Away_D_Points , a_O= modelData$Away_O_Points,hprior_O = modelData$Home_O_Points_Last_Year,hprior_D = modelData$Home_D_Points_Last_Year,aprior_O = modelData$Away_O_Points_Last_Year,aprior_D = modelData$Away_D_Points_Last_Year, w = modelData$binnedWeeks),\n\ninits=list(.RNG.name=\"base::Wichmann-Hill\", .RNG.seed=1989))\n\nfinal_sim <- coda.samples(final_jags, variable.names=c(\"h0\",\"b0\",\"b1\",\"b2\"), n.iter=10000)\n```\n \n```{r}\nfinal_sample <- data.frame(step=1:10000, final_sim[[1]])\nhead(final_sample)\n```\n```{r}\nsummary(final_sim)\nplot(final_sim)\n```\n```{r}\nset.seed(13)\nsingle_prediction <- function(modelDFRow, predictionsDF){\n  home_pred = rpois(10000,exp(predictionsDF$h0 + predictionsDF$b0 + predictionsDF[,modelDFRow$binnedWeek + 2]*(modelDFRow$`Home_O_Points` - modelDFRow$`Away_D_Points`) + predictionsDF[,modelDFRow$binnedWeek + 5]*(modelDFRow$`Home_O_Points_Last_Year` - modelDFRow$`Away_D_Points_Last_Year`)))\n  \n  away_pred = rpois(10000,exp(predictionsDF$b0 + predictionsDF[,modelDFRow$binnedWeek + 2]*(modelDFRow$`Away_O_Points` - modelDFRow$`Home_D_Points`) + predictionsDF[,modelDFRow$binnedWeek + 5]*(modelDFRow$`Away_O_Points_Last_Year` - modelDFRow$`Home_D_Points_Last_Year`)))\n  \n  return(list(score_diff = home_pred - away_pred, total_pts = home_pred + away_pred))           \n}\n\nall_predictions <- function(data, sampleDF){\n  score_diff_predictions = rep(0,nrow(data))\n  total_points_predictions = rep(0,nrow(data))\n  for(i in 1:nrow(data)){\n    prediction = single_prediction(data[i,],sampleDF)\n    score_diff_predictions[i] = round(mean(prediction$score_diff))\n    total_points_predictions[i] = round(mean(prediction$total_pts))\n  }\n  predictionsDF = data.frame(score_diff_predictions,total_points_predictions)\n\n  newDF = bind_cols(data,predictionsDF)\n  return(newDF)\n}\n```\n\n\n\n\n```{r}\npredict2016 = all_predictions(modelDF2016, final_sample)\n\npredict2016 <- predict2016 %>%\n  mutate(score_diff = Home_Points - Away_Points) %>%\n  mutate(score_accuracy = score_diff_predictions - score_diff) %>%\n  mutate(score_error = abs(score_accuracy)) %>%\n  mutate(total_pts = Home_Points + Away_Points) %>%\n  mutate(total_pts_accuracy = total_points_predictions - total_pts) %>%\n  mutate(total_error = abs(total_pts_accuracy)) %>%\n  select(Date,Week,Home_Team,Home_Points,Away_Team,Away_Points,contains('score'),contains('total'))\n  \n\n\nonlyTeam <- function(dataframe,Team){\n  onlyTeamData <- dataframe %>%\n    subset(Home_Team == Team | Away_Team == Team)\n  return(onlyTeamData)\n}\n\nteamPredictions <- function(dataframe,team){\n  \n  teamData <- onlyTeam(dataframe, team)\n  \n  teamHome <- teamData %>%\n    subset(Home_Team == team) %>%\n    select(Week,Home_Team,7:10) %>%\n    rename(Team = Home_Team) %>%\n    mutate(team_score_diff_predictions = score_diff_predictions) %>%\n    mutate(team_score_diff = score_diff) %>%\n    mutate(team_score_accuracy = score_accuracy) %>%\n    select(Week,Team,contains(\"team\"),score_error)\n\n  teamAway <- teamData %>%\n    subset(Away_Team == team) %>%\n    select(Week,Away_Team,7:10) %>%\n    rename(Team = Away_Team) %>%\n    mutate(team_score_diff_predictions = -1*score_diff_predictions) %>%\n    mutate(team_score_diff = -1*score_diff) %>%\n    mutate(team_score_accuracy = -1*score_accuracy) %>%\n    select(Week,Team,contains(\"team\"),score_error)\n  \n  finalTeamData <- bind_rows(teamAway,teamHome) %>%\n    select(Week,Team,contains(\"score_diff\"),-contains('accuracy')) %>%\n    arrange(Week) %>%\n    gather(Result, `Point Differential`,-Week,-Team)\n  \n  return(finalTeamData)\n}\n\n```\n\n# View(predict2016)\n\n```{r}\n\n\n# mean(predict2016$`score_accuracy`)\nggplot(predict2016, aes(x=`score_accuracy`)) + geom_histogram(binwidth = 3, aes(y=..density..))\nggplot(predict2016, aes(x=`total_pts_accuracy`)) + geom_histogram(binwidth = 3, aes(y=..density..))\n\nggplot(predict2016, aes(x=`score_error`)) + geom_histogram(binwidth = 3, aes(y=..density..))\nggplot(predict2016, aes(x=`total_error`)) + geom_histogram(binwidth = 3, aes(y=..density..))\n\nmean(predict2016$score_error)\nmean(predict2016$total_error)\n\nmean(predict2016$score_accuracy)\nmean(predict2016$total_pts_accuracy)\n\n```\n\n```{r}\ndenver = teamPredictions(predict2016,\"Denver\")\nnewEngland = teamPredictions(predict2016,\"New England\")\nlosAngeles = teamPredictions(predict2016,\"Los Angeles\")\ncarolina = teamPredictions(predict2016,\"Carolina\")\nchicago = teamPredictions(predict2016,\"Chicago\")\ngreenBay = teamPredictions(predict2016,\"Green Bay\")\nnewOrleans = teamPredictions(predict2016,\"New Orleans\")\ntennessee =  teamPredictions(predict2016,\"Tennessee\")\noakland = teamPredictions(predict2016,\"Oakland\")\nminnesota = teamPredictions(predict2016,\"Minnesota\")\ncleveland = teamPredictions(predict2016,\"Cleveland\")\n\n\n\n\n\n\n\n\n\nggplot(denver, aes(x= Week,y = `Point Differential`,color = Result)) +\n    geom_line() + geom_point() + ggtitle(\"Denver\")\n\nggplot(newEngland, aes(x= Week,y = `Point Differential`,color = Result)) +\n    geom_line() + geom_point()+ ggtitle(\"New England\")\n\nggplot(losAngeles, aes(x= Week,y = `Point Differential`,color = Result)) +\n    geom_line() + geom_point()+ ggtitle(\"Los Angeles\")\n\nggplot(carolina, aes(x= Week,y = `Point Differential`,color = Result)) +\n    geom_line() + geom_point()+ ggtitle(\"Carolina\")\n\nggplot(chicago, aes(x= Week,y = `Point Differential`,color = Result)) +\n    geom_line() + geom_point()+ ggtitle(\"Chicago\")\n\nggplot(greenBay, aes(x= Week,y = `Point Differential`,color = Result)) +\n    geom_line() + geom_point()+ ggtitle(\"Green Bay\")\n\nggplot(newOrleans, aes(x= Week,y = `Point Differential`,color = Result)) +\n    geom_line() + geom_point()+ ggtitle(\"New Orleans\")\n\nggplot(tennessee, aes(x= Week,y = `Point Differential`,color = Result)) +\n    geom_line() + geom_point()+ ggtitle(\"Tennessee\")\n\nggplot(oakland, aes(x= Week,y = `Point Differential`,color = Result)) +\n    geom_line() + geom_point()+ ggtitle(\"Oakland\")\n\nggplot(minnesota, aes(x= Week,y = `Point Differential`,color = Result)) +\n    geom_line() + geom_point()+ ggtitle(\"Minnesota\")\n\nggplot(cleveland, aes(x= Week,y = `Point Differential`,color = Result)) +\n    geom_line() + geom_point()+ ggtitle(\"Cleveland\")\n\n```\n\n",
    "created" : 1513358640427.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2346721984",
    "id" : "6146C5EB",
    "lastKnownWriteTime" : 1513536478,
    "last_content_update" : 1513536478478,
    "path" : "/home/local/MAC/bgraham/BayesStats_Project/FinalReportBlog.Rmd",
    "project_path" : "FinalReportBlog.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}